<?xml version="1.0"?><st-source><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '9:16:34 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 9:16:34 am on November 12, 2023."</do-it><do-it>Alumno organization addCategory: #getDni</do-it><methods><class-id>Core.Alumno</class-id> <category>getDni</category><body package="BOSS" selector="getDni">getDni^dni</body></methods><do-it>Alumno organization addCategory: #setDni</do-it><component-created><name>Arbor GIF Reader Writer</name> <type>package</type></component-created><parcel-loaded><name>Arbor GIF Reader Writer</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'ArborGIFReaderWriter.pcl'))</filename></parcel-loaded><component-created><name>Arbor Help System Widget Help Core</name> <type>package</type></component-created><parcel-loaded><name>Arbor Help System Widget Help Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'HelpSystemWidgetHelpCore.pcl'))</filename></parcel-loaded><component-created><name>Arbor Help System Core</name> <type>package</type></component-created><parcel-loaded><name>Arbor Help System Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'HelpSystemCore.pcl'))</filename></parcel-loaded><component-created><name>Arbor Hypertext</name> <type>package</type></component-created><parcel-loaded><name>Arbor Hypertext</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'Hypertext.pcl'))</filename></parcel-loaded><component-created><name>Arbor Help System Outline Help Core</name> <type>package</type></component-created><parcel-loaded><name>Arbor Help System Outline Help Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'HelpSystemOutlineHelpCore.pcl'))</filename></parcel-loaded><component-created><name>VWHelp</name> <type>package</type></component-created><parcel-loaded><name>VWHelp</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'VWHelp.pcl'))</filename></parcel-loaded><methods><class-id>Core.Alumno</class-id> <category>setDni</category><body package="BOSS" selector="setDni">setDni|dniIngresado|dni := dniIngresado</body></methods><component-created><name>Adapt5-Example</name> <type>package</type></component-created><parcel-loaded><name>Adapt5-Example</name> <filename>(OS.LogicalFilename fromComponents: #('c:\' 'Program Files (x86)' 'Cincom' 'vw7.6nc' 'examples' 'Adapt5.pcl'))</filename></parcel-loaded><component-created><name>Adapt6-Example</name> <type>package</type></component-created><parcel-loaded><name>Adapt6-Example</name> <filename>(OS.LogicalFilename fromComponents: #('c:\' 'Program Files (x86)' 'Cincom' 'vw7.6nc' 'examples' 'Adapt6.pcl'))</filename></parcel-loaded><component-created><name>Dependency-Example</name> <type>package</type></component-created><parcel-loaded><name>Dependency-Example</name> <filename>(OS.LogicalFilename fromComponents: #('c:\' 'Program Files (x86)' 'Cincom' 'vw7.6nc' 'examples' 'Depend.pcl'))</filename></parcel-loaded><component-created><name>Font1-Example</name> <type>package</type></component-created><parcel-loaded><name>Font1-Example</name> <filename>(OS.LogicalFilename fromComponents: #('c:\' 'Program Files (x86)' 'Cincom' 'vw7.6nc' 'examples' 'Font1.pcl'))</filename></parcel-loaded><do-it>Alumno organization addCategory: #getCursadas</do-it><methods><class-id>Core.Alumno</class-id> <category>getCursadas</category><body package="BOSS" selector="getCursadas">getCursadas^cursadas</body></methods><methods><class-id>Core.Alumno</class-id> <category>setDni</category><body package="BOSS" selector="setDni:">setDni: unDni    dni := unDni</body></methods><remove-selector><class-id>Core.Alumno</class-id> <selector>setDni</selector></remove-selector><do-it>Alumno organization addCategory: #getFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>getFinales</category><body package="BOSS" selector="getFinales">getFinales^finales</body></methods><methods><class-id>Core.Alumno</class-id> <category>getFinales</category><body package="BOSS" selector="getFinales">getFinales		^finales</body></methods><methods><class-id>Core.Alumno</class-id> <category>getDni</category><body package="BOSS" selector="getDni">getDni		^dni</body></methods><methods><class-id>Core.Alumno</class-id> <category>getCursadas</category><body package="BOSS" selector="getCursadas">getCursadas		^cursadas</body></methods><methods><class-id>Core.Alumno</class-id> <category>setDni</category><body package="BOSS" selector="setDni:">setDni: unDni		dni := unDni</body></methods><methods><class-id>Core.Alumno</class-id> <category>setDni</category><body package="BOSS" selector="setDni:">setDni: unDni		dni := unDni</body></methods><do-it>Alumno class organization addCategory: #'accessing instances and variables'</do-it><do-it>Alumno class organization removeCategory: #'accessing instances and variables'</do-it><methods><class-id>Core.Alumno</class-id> <category>setDni</category><body package="BOSS" selector="setDni:">setDni: unDni	dni := unDni</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '10:07:44 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 10:07:44 am on November 12, 2023."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '10:20:20 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 10:20:20 am on November 12, 2023."</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>'abc' reverse</do-it><do-it>alumno := Alumno new.</do-it><do-it>alumno getDni</do-it><do-it>alumno := Alumno new.</do-it><do-it>alumno setDni:123</do-it><do-it>alumno getDni</do-it><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.</do-it><do-it>Alumno organization addCategory: #setCursadas</do-it><methods><class-id>Core.Alumno</class-id> <category>setCursadas</category><body package="BOSS" selector="setCursadas:">setCursadas: cursadasNuevoArray		cursadas := cursadasNuevoArray</body></methods><do-it>Alumno organization addCategory: #setFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>setFinales</category><body package="BOSS" selector="setFinales:">setFinales: finalesNuevoArray		cursadas := finalesNuevoArray</body></methods><methods><class-id>Core.Alumno</class-id> <category>setFinales</category><body package="BOSS" selector="setFinales:">setFinales: finalesNuevoArray		finales := finalesNuevoArray</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '10:36:02 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 10:36:02 am on November 12, 2023."</do-it><do-it>Cursada organization addCategory: #getAño</do-it><methods><class-id>Core.Cursada</class-id> <category>getAño</category><body package="BOSS" selector="getAño">getAño		^año</body></methods><do-it>Cursada organization addCategory: #setAño</do-it><methods><class-id>Core.Cursada</class-id> <category>setAño</category><body package="BOSS" selector="setAño:">setAño: añoNuevo		año := añoNuevo</body></methods><do-it>Cursada organization addCategory: #getMateria</do-it><methods><class-id>Core.Cursada</class-id> <category>getMateria</category><body package="BOSS" selector="getMateria">getMateria		^materia</body></methods><do-it>Cursada organization addCategory: #setMateria</do-it><methods><class-id>Core.Cursada</class-id> <category>setMateria</category><body package="BOSS" selector="setMateria:">setMateria: nuevaMateria		materia := nuevaMateria</body></methods><do-it>Cursada organization addCategory: #getResultado</do-it><methods><class-id>Core.Cursada</class-id> <category>getResultado</category><body package="BOSS" selector="getResultado">getResultado		^resultado</body></methods><do-it>Cursada organization addCategory: #setResultado</do-it><methods><class-id>Core.Cursada</class-id> <category>setResultado</category><body package="BOSS" selector="setResultado:">setResultado: resultadoNuevo		resultado := resultadoNuevo</body></methods><do-it>Cursada organization addCategory: #getCalificacion</do-it><methods><class-id>Core.Cursada</class-id> <category>getCalificacion</category><body package="BOSS" selector="getCalificacion">getCalificacion		^calificacion</body></methods><do-it>Cursada organization addCategory: #setCalificacion</do-it><methods><class-id>Core.Cursada</class-id> <category>setCalificacion</category><body package="BOSS" selector="setCalificacion:">setCalificacion: calificacionNueva		calificacion := calificacionNueva</body></methods><do-it>Final organization addCategory: #getVeces</do-it><methods><class-id>Core.Final</class-id> <category>getVeces</category><body package="BOSS" selector="getVeces">getVeces		^veces</body></methods><do-it>Final organization addCategory: #setVeces</do-it><methods><class-id>Core.Final</class-id> <category>setVeces</category><body package="BOSS" selector="setVeces:">setVeces: vecesNuevo		veces := vecesNuevo</body></methods><do-it>Final organization addCategory: #getMateria</do-it><methods><class-id>Core.Final</class-id> <category>getMateria</category><body package="BOSS" selector="getMateria">getMateria		^materia</body></methods><do-it>Final organization addCategory: #setMateria</do-it><methods><class-id>Core.Final</class-id> <category>setMateria</category><body package="BOSS" selector="setMateria:">setMateria: materiaNuevo		materia := materiaNuevo</body></methods><do-it>FinalAprobado organization addCategory: #getMateria</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>getMateria</category><body package="BOSS" selector="getMateria">getMateria		^materia</body></methods><do-it>FinalAprobado organization addCategory: #setMateria</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>setMateria</category><body package="BOSS" selector="setMateria:">setMateria: materiaNueva		materia := materiaNueva</body></methods><do-it>FinalAprobado organization addCategory: #setVeces</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>setVeces</category><body package="BOSS" selector="setVeces:">setVeces: vecesNuevo		veces := vecesNuevo</body></methods><do-it>FinalAprobado organization addCategory: #getVeces</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>getVeces</category><body package="BOSS" selector="getVeces">getVeces		^veces</body></methods><do-it>FinalAprobado organization addCategory: #setFecha</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>setFecha</category><body package="BOSS" selector="setFecha:">setFecha: fechaNueva		fecha := fechaNueva</body></methods><do-it>FinalAprobado organization addCategory: #getFecha</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>getFecha</category><body package="BOSS" selector="getFecha">getFecha	^fecha</body></methods><do-it>FinalAprobado organization addCategory: #getCalificacion</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>getCalificacion</category><body package="BOSS" selector="getCalificacion">getCalificacion	^calificacion</body></methods><do-it>FinalAprobado organization addCategory: #setCalificacion</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>setCalificacion</category><body package="BOSS" selector="setCalificacion:">setCalificacion: calificacionNueva	calificacion := calificacionNueva</body></methods><do-it>FinalAprobado organization addCategory: #getTipo</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>getTipo</category><body package="BOSS" selector="getTipo">getTipo	^tipo</body></methods><do-it>FinalAprobado organization addCategory: #setTipo</do-it><methods><class-id>Core.FinalAprobado</class-id> <category>setTipo</category><body package="BOSS" selector="setTipo:">setTipo: tipoNuevo	tipo := tipoNuevo</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '11:05:37 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:05:37 am on November 12, 2023."</do-it><do-it>FinalNoAprobado organization addCategory: #getVeces</do-it><methods><class-id>Core.FinalNoAprobado</class-id> <category>getVeces</category><body package="BOSS" selector="getVeces">getVeces	^veces</body></methods><do-it>FinalNoAprobado organization addCategory: #setVeces</do-it><methods><class-id>Core.FinalNoAprobado</class-id> <category>setVeces</category><body package="BOSS" selector="setVeces:">setVeces: vecesNueva	veces := vecesNueva</body></methods><do-it>FinalNoAprobado organization addCategory: #getMateria</do-it><methods><class-id>Core.FinalNoAprobado</class-id> <category>getMateria</category><body package="BOSS" selector="getMateria">getMateria	^materia</body></methods><do-it>FinalNoAprobado organization addCategory: #setMateria</do-it><methods><class-id>Core.FinalNoAprobado</class-id> <category>setMateria</category><body package="BOSS" selector="setMateria:">setMateria: materiaNueva	materia := materiaNueva</body></methods><do-it>FinalNoAprobado organization addCategory: #getAñoPiensaRendir</do-it><methods><class-id>Core.FinalNoAprobado</class-id> <category>getAñoPiensaRendir</category><body package="BOSS" selector="getAñoPiensaRendir">getAñoPiensaRendir	^añoPiensaRendir</body></methods><do-it>FinalNoAprobado organization addCategory: #setAñoPiensaRendir</do-it><methods><class-id>Core.FinalNoAprobado</class-id> <category>setAñoPiensaRendir</category><body package="BOSS" selector="setAñoPiensaRendir:">setAñoPiensaRendir: añoNuevo	añoPiensaRendir := añoNuevo</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '11:11:17 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:11:17 am on November 12, 2023."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '11:12:30 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:12:30 am on November 12, 2023."</do-it><do-it>cursada := Cursada new.cursada getAño.cursada setAño: 2023.cursada getAño.</do-it><do-it>cursada := Cursada new.cursada getAño.</do-it><do-it>cursada setAño: 2023.cursada getAño. </do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>cursada setAño: 2023.cursada getAño.</do-it><do-it>cursada setAño: 2023.cursada getAño.</do-it><do-it>cursada setAño: 2023.cursada getAño.</do-it><do-it>cursada setAño: 2023.cursada getAño.</do-it><do-it>cursada setAño: 2023.cursada getAño.</do-it><do-it>cursada := Cursada new.cursada getAño.cursada setAño: 2023.cursada getAño.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '11:51:48 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:51:48 am on November 12, 2023."</do-it><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.</do-it><do-it>datos := Collection new.</do-it><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.cursada := Cursada new.cursada getAño.cursada setAño: 2023.cursada getAño. </do-it><do-it>datos := Collection new.</do-it><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Collections-Abstract" selector="do:">do: aBlockClosure 	self halt</body></methods><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.cursada := Cursada new.cursada getAño.cursada setAño: 2023.cursada getAño.  </do-it><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '1:03:18 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 1:03:18 pm on November 12, 2023."</do-it><do-it>Array</do-it><do-it>Array</do-it><do-it>Transcript show: 'hola'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '1:39:29 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 1:39:29 pm on November 12, 2023."</do-it><do-it>| sabores |sabores := OrderedCollection new.saboresadd: 'Vanilla';add: 'Chocolate';add: 'Frutilla';add: 'Limón';add: 'Dulce de leche'.^sabores</do-it><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '1:54:07 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 1:54:07 pm on November 12, 2023."</do-it><do-it>alumno := Alumno new.alumno setDni:123. alumno getDni.</do-it><do-it>alumno1 := Alumno new.alumno1 setDni: 123.alumno2 := Alumno new.alumno2 setDni: 456.</do-it><do-it>alumno1 := Alumno new.alumno1 setDni: 123.alumno2 := Alumno new.alumno2 setDni: 456.</do-it><do-it>arregloDeAlumnos := #(alumno1 alumno2).</do-it><do-it>alumno1 := Alumno new.alumno1 setDni: 123.alumno2 := Alumno new.alumno2 setDni: 456.</do-it><do-it>arregloDeAlumnos := #(alumno1 alumno2).</do-it><do-it>nombre := Dialog request: ' Cómo se llama?' initialAnswer: ' '.</do-it><do-it>nombre := Dialog request: ' Cómo se llama?' initialAnswer: ' '. ''</do-it><do-it>nombre := Dialog request: ' Cómo se llama?' initialAnswer: ' '. </do-it><do-it>dni := Dialog request: ' Ingrese su dni' initialAnswer: ' '.</do-it><do-it>alumno := Alumno new.dni := Dialog request: ' Ingrese su dni' initialAnswer: ' '.alumno setDni: dni.alumno getDni.</do-it><do-it>alumno := Alumno new.dni := Dialog request: ' Ingrese su dni' initialAnswer: ' '.alumno setDni: dni.alumno getDni.cursada := Cursada new.materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.cursada setMateria: dni.cursada getMateria.</do-it><do-it>cursada := Cursada new.materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.cursada setMateria: materia.cursada getMateria.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 12, 2023' '2:45:08 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 2:45:08 pm on November 12, 2023."</do-it><do-it>cursada := Cursada new.materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.cursada setMateria: materia.cursada getMateria.</do-it><do-it>Transcript show: ('Error: Ingrese un año válido (entre 2009 y 2024)').</do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor] ensure: [Dialog warn: 'Division may or may not have succeeded.']</do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor] ensure: [Dialog warn: 'Division may or may not have succeeded.'] </do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor]	 ifCurtailed: [Dialog warn: 'Division by zero attempted.']	"Click Terminate in Exception window on exception. Note again the exception is not specified."</do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor]	 ifCurtailed: [Dialog warn: 'Division by zero attempted.']	"Click Terminate in Exception window on exception. Note again the exception is not specified."</do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor]	 ifCurtailed: [Dialog warn: 'Division by zero attempted.']	"Click Terminate in Exception window on exception. Note again the exception is not specified."</do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor]	 ifCurtailed: [Dialog warn: 'Division by zero attempted.']	"Click Terminate in Exception window on exception. Note again the exception is not specified."</do-it><do-it>| divisor |divisor := (Dialog request: 'Enter divisor' initialAnswer: '0') asNumber.[10 / divisor]	 ifCurtailed: [Dialog warn: 'Division by zero attempted.']</do-it><do-it>| array |array := Array with: 11 with: 22 with: 33.Transcript clear;	show: 'element at index 2 is ', (array at: 2) printString; cr.array at: 2 put: 20.Transcript show: 'new element at index 2 is ', (array at: 2) printString</do-it><do-it>#(1 2 3 4) 	do: [:each | 		MyTranscript show: each squared printString; cr].</do-it><do-it>#(1 5 2 89 34 53)	detect: [:each | each &gt; 28].</do-it><do-it>#(1 5 2 89 34 53)	detect: [:each | each &gt; 28].</do-it><do-it>#(1 2 3 4) 	do: [:each | 		MyTranscript show: each squared printString; cr].</do-it><do-it>#(1 5 2 89 34 53) 	select: [:each | each &gt; 28].</do-it><do-it>#(1 2 3 4) 	do: [:each | 		MyTranscript show: each squared printString; cr].</do-it><do-it>(Menu labels: 'OnceandOnlyOnce' ) startUp.</do-it><do-it>(Menu labels: 'OnceandOnlyOnce' ) startUp.</do-it><do-it>(Menu labels: 'OnceandOnlyOnce' ) startUp.</do-it><do-it>(Menu labels: 'OnceandOnlyOnce' ) startUp.</do-it><do-it>| menu |menu := Menu labels:'Once\and\Only\Once' withCRs.menu startUp. </do-it><do-it>| menu |menu := Menu 			labels: 'Binary\Octal\Decimal\Hexadecimal' withCRs			values: #( 2 8 10 16 ).16 printStringRadix: menu startUp </do-it><do-it>Dialog		choose: 'Are you tired yet?'		labels: #( 'absolutely' 'sort of' 'not really')		values: #(#yes #maybe #no)		default: #maybe.</do-it><do-it>| count |count := 0.[count &lt; 100] 	whileTrue: [count := count + 1].MyTranscript 	show: count printString; cr.</do-it><do-it>| count |count := 0.[count &lt; 100] 	whileTrue: [count := count + 1].MyTranscript 	show: count printString; cr.</do-it><do-it>| |Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' '.</do-it><do-it>| anio |anio := Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' '.</do-it><do-it>| anio |anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ') asInteger.</do-it><do-it>| anio |anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ') asInteger. [anio &lt; 2009 &amp; anio &gt; 2024] 	whileTrue: [anio := Dialog request: 'Error, Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' '.].</do-it><do-it>| anio |anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ') asNumber. [anio &lt; 2009 &amp; anio &gt; 2024] 	whileTrue: [anio := Dialog request: 'Error, Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' '.].MyTranscript 	show: anio printString; cr.</do-it><do-it>| anio |anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' )asInteger. [anio &lt; 2009 &amp; anio &gt; 2024] 	whileTrue: [anio := Dialog request: 'Error, Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' '.].</do-it><do-it>| count |count := 0.[count squared &gt; 100] 	whileFalse: [count := count + 1].MyTranscript 	show: count printString; cr.</do-it><do-it>| count |count := 0.[count &lt; 100] 	whileTrue: [count := count + 1].MyTranscript 	show: count printString; cr.</do-it><do-it>| count |count := 0.[count squared &gt; 100] 	whileFalse: [count := count + 1].MyTranscript 	show: count printString; cr.</do-it><do-it>| anio |anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) . [anio &lt; '2009' &amp; anio &gt; '2024'] 	whileTrue: [anio := (Dialog request: 'Error, Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ') ].</do-it><do-it>| anio |anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) . </do-it><do-it>| anio |anio := (Dialog request: 'Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: '') asInteger.</do-it><do-it>| anio |anio := (Dialog request: 'Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: '') asNumber.</do-it><methods><class-id>Core.SmallInteger</class-id> <category>As yet unclassified</category><body package="Magnitude-Numbers" selector="asString">asString	self halt</body></methods><do-it>| anio hola |hola := "hola"anio := (Dialog request: 'Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: '') asNumber.</do-it><do-it>alumno := Alumno new.cursada := Cursada new.</do-it><do-it>materia := Dialog request: ' Ingrese el nombre de la materia'.cursada setMateria: materia.</do-it><do-it>cursada getMateria.</do-it><do-it>Cursada organization addCategory: #prueba</do-it><methods><class-id>Core.Cursada</class-id> <category>prueba</category><body package="BOSS" selector="prueba">prueba		|anio|	anio := Dialog request:			' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'		initialAnswer: ' '.	[(anio &lt; 2009 | anio) &gt; 2024]		whileTrue:			[anio := Dialog request:					' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'				initialAnswer: ' ']</body></methods><methods><class-id>Core.Cursada</class-id> <category>prueba</category><body package="BOSS" selector="prueba">prueba		|anio|	anio := Dialog request:			' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'		initialAnswer: ' '.	[(anio &lt; '2009' | anio) &gt; '2024']		whileTrue:			[anio := Dialog request:					' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'				initialAnswer: ' ']</body></methods><do-it>| anio |anio := Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' .[anio &lt; '2009' | anio &gt; '2024'] whileTrue: [             anio := Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' .       ].</do-it><remove-selector><class-id>Core.Cursada</class-id> <selector>prueba</selector></remove-selector><do-it>Cursada organization removeCategory: #prueba</do-it><do-it>| anio |anio := Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' .[anio &lt; '2009' | anio &gt; '2024'] whileTrue: [             anio := Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' .       ].</do-it><do-it>| anio |anio := Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' .[anio &lt; '2009' | anio &gt; '2024'] whileTrue: [             anio := Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' .       ].</do-it><do-it>dni := Dialog request: ' Ingrese su dni' initialAnswer: ' ' .alumno setDni: dni.</do-it><do-it>alumno getDni.</do-it><do-it>alumno getDni.</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024]  )] whileTrue: [             anio := (Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024]  )] whileTrue: [             anio := (Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024]  )] whileTrue: [             anio := (Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             anio := (Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             anio := (Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             anio := (Dialog request: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'.       ].</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'.       ].^anio</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'.       ].anio</do-it><do-it>alumno := Alumno new.cursada := Cursada new.</do-it><do-it>| anio |[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'.       ].cursada setAño: anio.cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 13, 2023' '11:27:30 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:27:30 am on November 13, 2023."</do-it><class><name>Alumno</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dni cursadas finalesAprobados </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>BOSS</package></attributes></class><methods><class-id>Core.Alumno</class-id> <category>setFinales</category><body package="BOSS" selector="setFinales:">setFinales: finalesNuevoArray		finalesAprobados := finalesNuevoArray</body></methods><methods><class-id>Core.Alumno</class-id> <category>getFinales</category><body package="BOSS" selector="getFinales">getFinales		^finalesAprobados</body></methods><methods><class-id>Core.Alumno</class-id> <category>getFinales</category><body package="BOSS" selector="getFinalesAprobados">getFinalesAprobados		^finalesAprobados</body></methods><remove-selector><class-id>Core.Alumno</class-id> <selector>getFinales</selector></remove-selector><methods><class-id>Core.Alumno</class-id> <category>setFinales</category><body package="BOSS" selector="setFinalesAprobados:">setFinalesAprobados: finalesNuevoArray		finalesAprobados := finalesNuevoArray</body></methods><remove-selector><class-id>Core.Alumno</class-id> <selector>setFinales:</selector></remove-selector><methods><class-id>Core.Alumno</class-id> <category>setFinales</category><body package="BOSS" selector="setFinalesAprobados:">setFinalesAprobados: finalesNuevoArray		finalesAprobados := finalesNuevoArray</body></methods><class><name>Alumno</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dni cursadas finalesAprobados finalesNoAprobados </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>BOSS</package></attributes></class><do-it>Alumno organization renameCategory: #getFinales to: #getFinalesAprobados</do-it><do-it>Alumno organization renameCategory: #setFinales to: #setFinalesAprobados</do-it><do-it>Alumno organization addCategory: #getFinalesNoAprobados</do-it><methods><class-id>Core.Alumno</class-id> <category>getFinalesNoAprobados</category><body package="BOSS" selector="getFinalesNoAprobados">getFinalesNoAprobados		^finalesNoAprobados</body></methods><do-it>Alumno organization addCategory: #setFinalesNoAprobados</do-it><methods><class-id>Core.Alumno</class-id> <category>setFinalesNoAprobados</category><body package="BOSS" selector="setFinalesNoAprobados">setFinalesNoAprobados	^finalesNoAprobados</body></methods><methods><class-id>Core.Alumno</class-id> <category>setFinalesNoAprobados</category><body package="BOSS" selector="setFinalesNoAprobados">setFinalesNoAprobados		^finalesNoAprobados</body></methods><methods><class-id>Core.Alumno</class-id> <category>setFinalesNoAprobados</category><body package="BOSS" selector="setFinalesNoAprobados:">setFinalesNoAprobados: finalArray		finalesNoAprobados := finalArray</body></methods><remove-selector><class-id>Core.Alumno</class-id> <selector>setFinalesNoAprobados</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 13, 2023' '12:50:14 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 12:50:14 pm on November 13, 2023."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 13, 2023' '12:51:33 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 12:51:33 pm on November 13, 2023."</do-it><do-it>[|anio|anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'.       ].</do-it><do-it>Dialog 		choose: 'Which one do you want?' 		fromList: #('first' 'second' 'third' 'fourth') 		values: #(1 2 3 4) 		lines: 8 		cancel: [#noChoice].</do-it><do-it>Dialog 		choose: 'Which one do you want?' 		fromList: #('first' 'second' 'third' 'fourth') 		values: #(1 2 3 4) 		lines: 8 		cancel: [#noChoice].</do-it><do-it>Dialog 		choose: 'Which one do you want?' 		fromList: #('first' 'second' 'third' 'fourth') 		values: #(1 2 3 4) 		lines: 8 		cancel: [#noChoice].</do-it><do-it>Dialog		choose: 'Are you tired yet?'		labels: #( 'absolutely' 'sort of' 'not really')		values: #(#yes #maybe #no)		default: #maybe.</do-it><do-it>resultadoCursada := Dialog		choose: 'Are you tired yet?'		labels: #( 'absolutely' 'sort of' 'not really')		values: #(#yes #maybe #no)		default: #maybe.</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #(#Aprobado #Desaprobado #Ausente)		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #(Aprobado #Desaprobado #Ausente)		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado. </do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #(Aprobado Desaprobado Ausente)		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado. </do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #('Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado. </do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.</do-it><do-it>(cursada getResultado = 'Aprobado') ifTrue: [	[|nota|	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.	cursada getCalificacion.	].</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[|nota|	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.	cursada getCalificacion.	].</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.	cursada getCalificacion.	].</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. cursada getCalificacion.</do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. cursada getCalificacion. </do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. cursada getCalificacion. </do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. cursada getCalificacion.  </do-it><do-it>resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.cursada getResultado.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. cursada getCalificacion.  </do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.</do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [	[	rindioFinal := Dialog		choose: ' holaaaaaa'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]] ifFalse: [	[		rindioFinal := Dialog		choose: ' chauuuuuuuuuu '		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]]</do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [	[	rindioFinal := Dialog		choose: ' holaaaaaa'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]] ifFalse: 	[		rindioFinal := Dialog		choose: ' chauuuuuuuuuu '		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]</do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [	[	rindioFinal := Dialog		choose: ' holaaaaaa'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]] ifFalse: 	[		rindioFinal := Dialog		choose: ' chauuuuuuuuuu '		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]</do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [		rindioFinal := Dialog		choose: ' holaaaaaa'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	] ifFalse: 	[		rindioFinal := Dialog		choose: ' chauuuuuuuuuu '		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]</do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [		anio := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.	] ifFalse: 	[		rindioFinal := Dialog		choose: ' chauuuuuuuuuu '		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]</do-it><do-it>rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [		anio := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.	] ifFalse: 	[		rindioFinal := Dialog		choose: ' chauuuuuuuuuu '		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.	]</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 13, 2023' '1:58:39 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 1:58:39 pm on November 13, 2023."</do-it><do-it>Date newDay: 14 month: #Feb year: 2000</do-it><do-it>Date newDay: 14 month: #Feb year: 2000</do-it><do-it>cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.</do-it><do-it>Transcript show: 'hola'</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 13, 2023' '2:18:18 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 2:18:18 pm on November 13, 2023."</do-it><do-it>fechaFinal := (Dialog request: 'Indique el año en el que rindió el examen final' initialAnswer: ' ' ) asNumber.</do-it><do-it>fechaFinal := (Dialog request: 'Indique el año en el que rindió el examen final' initialAnswer: ' ' ) asNumber.</do-it><do-it>fechaFinal := (Dialog request: 'Indique el año en el que rindió el examen final' initialAnswer: ' ' ) asNumber. 			fechaFinal asInteger.</do-it><do-it>fechaFinal := (Dialog request: 'Indique el año en el que rindió el examen final' initialAnswer: ' ' ) asNumber. 			fechaFinal asInteger.</do-it><do-it>fechaFinal := (Dialog request: 'Indique el año en el que rindió el examen final' initialAnswer: ' ' ) asNumber. 			fechaFinal asInteger. </do-it><do-it>[|anioFinal|			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].</do-it><do-it>[|anioFinal|			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].</do-it><do-it>[|anioFinal|			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].</do-it><do-it>[|anioFinal|			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].</do-it><do-it>[|anio|anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.(anio isNil or: [anio between: 2009 and: 2024] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2009 y 2024)'.       ].</do-it><do-it>anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.</do-it><do-it>finalAprobado := FinalAprobado new.</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha.</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].					finalAprobado setFecha: anioFinal.</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final (valor entre 2009 y 2024)' initialAnswer: ' ' ) asNumber.			(anioFinal isNil or: [anioFinal between: 2009 and: 2024] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese  el año en el que rindió el examen final (valor entre 2009 y 2024)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha</do-it><do-it>notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final' initialAnswer: ' ' ) asNumber. 			notaFinal asInteger.			finalAprobado setCalificacion: notaFinal.			finalAprobado getCalificacion.</do-it><do-it>[			notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final' initialAnswer: ' ' ) asNumber.			notaFinal asInteger.			(notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [               		Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final'.       		].			finalAprobado setCalificacion: notaFinal.			finalAprobado getCalificacion.</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.			anioFinal asInteger.			(cursada getAño &gt; anioFinal  or: [anioFinal between: 2010 and: 2023])] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha.</do-it><do-it>cursada getAño.</do-it><do-it>cursada getAño &gt; anioFinal</do-it><do-it>anioFinal asInteger.</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.			anioFinal asInteger. 			(cursada getAño &lt; anioFinal  or: [anioFinal between: 2010 and: 2023])] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha.</do-it><do-it>cursada getAño &lt; anioFinal</do-it><do-it>finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.			anioFinal asInteger. 			(cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '11:44:55 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:44:55 am on November 14, 2023."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '11:47:16 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 11:47:16 am on November 14, 2023."</do-it><do-it>alumno := Alumno new.cursada := Cursada new.dni := Dialog request: ' Ingrese su dni' initialAnswer: ' ' .alumno setDni: dni.materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.cursada setMateria: materia."------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"[|anio|anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.anio asInteger.(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.       ].cursada setAño: anio."------------------------------------------------------------------------------------------------------------------------""SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	nota asInteger.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. "------------------------------------------------------------------------------"rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [		cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.		aproboFinal := Dialog			choose: ' ¿Aprobó el examen final de la materia?'			labels: #( 'Si' 'No')			values: #( 'Si' 'No')			default: #Nil.		(aproboFinal = 'Si') ifTrue: [			finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.			anioFinal asInteger. 			(cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha.			[			notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.			notaFinal asInteger.			(notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [               		Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.       		].			finalAprobado setCalificacion: notaFinal.		] ifFalse: [			finalNoAprobado := FinalNoAprobado new.			[			anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.			anioPiensaFinal asInteger.			(anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.       		].					finalAprobado setFecha: anioPiensaFinal.		]] ifFalse: 	[	]</do-it><do-it>alumno := Alumno new.cursada := Cursada new.dni := Dialog request: ' Ingrese su dni' initialAnswer: ' ' .alumno setDni: dni.materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.cursada setMateria: materia."------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"[anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.anio asInteger.(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.       ].cursada setAño: anio."------------------------------------------------------------------------------------------------------------------------""SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"resultadoCursada := Dialog		choose: 'Seleccione el resultado de la cursada'		labels: #( 'Aprobado' 'Desaprobado' 'Ausente')		values: #( 'Aprobado' 'Desaprobado' 'Ausente')		default: #Ausente.cursada setResultado: resultadoCursada.(cursada getResultado = 'Aprobado') ifTrue: [	[	nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.	nota asInteger.	(nota isNil or: [nota between: 6 and: 10] )] whileFalse: [             Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.       ].	cursada setCalificacion: nota.		]. "------------------------------------------------------------------------------"rindioFinal := Dialog		choose: ' ¿Rindió alguna vez el examen final de la materia?'		labels: #( 'Si' 'No')		values: #( 'Si' 'No')		default: #Nil.(rindioFinal = 'Si') ifTrue: [		cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.		aproboFinal := Dialog			choose: ' ¿Aprobó el examen final de la materia?'			labels: #( 'Si' 'No')			values: #( 'Si' 'No')			default: #Nil.		(aproboFinal = 'Si') ifTrue: [			finalAprobado := FinalAprobado new.						[			anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.			anioFinal asInteger. 			(cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.       		].					finalAprobado setFecha: anioFinal.			finalAprobado getFecha.			[			notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.			notaFinal asInteger.			(notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [               		Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.       		].			finalAprobado setCalificacion: notaFinal.		] ifFalse: [			finalNoAprobado := FinalNoAprobado new.			[			anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.			anioPiensaFinal asInteger.			(anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [               		Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.       		].					finalAprobado setFecha: anioPiensaFinal.		]] ifFalse: 	[	]</do-it><do-it>anio</do-it><do-it>Alumno</do-it><do-it>alumno getCursadas</do-it><do-it>alumno getCursadas</do-it><do-it>alumno getCursadas isNil not</do-it><do-it>alumno getCursadas isNil </do-it><do-it>(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	].</do-it><do-it>(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].</do-it><do-it>(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].</do-it><do-it>alumno getCursadas</do-it><do-it>cursadaIngresada not</do-it><do-it>cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]]</do-it><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.    dni := Dialog request: ' Ingrese su dni' initialAnswer: ' ' .    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado        ]    ].            (alumno isNil) ifTrue: [        alumno := Alumno new.        alumno setDni: dni.    ].    materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"        anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.    anio asInteger.	"------------------"	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].	"------------------"    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [            cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.            aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                finalAprobado getFecha.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.                alumno setFinalesNoAprobados: finalNoAprobado.            ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	alumnos add: alumno.    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.    dni := Dialog request: ' Ingrese su dni' initialAnswer: ' ' .    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado        ]    ].            (alumno isNil) ifTrue: [        alumno := Alumno new.        alumno setDni: dni.    ].    materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"        anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.    anio asInteger.	"------------------"	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].	"------------------"    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [            cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ' ) asNumber.            aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                finalAprobado getFecha.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.                alumno setFinalesNoAprobados: finalNoAprobado.            ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	alumnos add: alumno.    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><remove-selector><class-id>Core.FinalAprobado</class-id> <selector>getTipo</selector></remove-selector><remove-selector><class-id>Core.FinalAprobado</class-id> <selector>setTipo:</selector></remove-selector><do-it>FinalAprobado organization removeCategory: #getTipo</do-it><do-it>FinalAprobado organization removeCategory: #setTipo</do-it><class><name>FinalAprobado</name><environment>Core</environment><super>Core.Final</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fecha calificacion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>BOSS</package></attributes></class><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '1:17:36 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 1:17:36 pm on November 14, 2023."</do-it><do-it>alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado        ]    ].</do-it><do-it>cantFinales</do-it><do-it>aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.</do-it><do-it>[  		cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' 1 ') asNumber.      	cantFinales asInteger.		(cantFinales = ' ' or: [cantFinales &lt; 0] ) ] whileTrue: [            	Dialog warn: ' Incorrecto!.Debe ingresar una cantidad mayor a 0. '.      	 ].</do-it><do-it>[  		cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ') asNumber.      	cantFinales asInteger.		(cantFinales = ' ' or: [cantFinales &lt; 0] ) ] whileTrue: [            	Dialog warn: ' Incorrecto!.Debe ingresar una cantidad mayor a 0. '.      	 ].</do-it><do-it>cantFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>initialize-release</category><body package="BOSS" selector="initialize">initialize	"	***This is decompiled code.*** 	No source was available"	cursadas := OrderedCollection new.
	finalesAprobados := OrderedCollection new.
	finalesNoAprobados := OrderedCollection new.	^self</body></methods><methods><class-id>Core.Alumno</class-id> <category>setCursadas</category><body package="BOSS" selector="setCursadas:">setCursadas: t1		cursadas add: t1.
</body></methods><methods><class-id>Core.Alumno</class-id> <category>setFinalesAprobados</category><body package="BOSS" selector="setFinalesAprobados:">setFinalesAprobados: t1		finalesAprobados add: t1. 
</body></methods><methods><class-id>Core.Alumno</class-id> <category>setFinalesNoAprobados</category><body package="BOSS" selector="setFinalesNoAprobados:">setFinalesNoAprobados: t1		finalesNoAprobados add: t1.</body></methods><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[  		cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ') asNumber.      	cantFinales asInteger.		(cantFinales = ' ' or: [cantFinales &lt; 0] ) ] whileTrue: [            	Dialog warn: ' Incorrecto!.Debe ingresar una cantidad mayor a 0. '.      	 ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	alumnos add: alumno.    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>alumno</do-it><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[  		cantFinales := (Dialog request: 'Indique la cantidad de veces que rindió el examen final' initialAnswer: ' ') asNumber.      	cantFinales asInteger.		(cantFinales = ' ' or: [cantFinales &lt; 0] ) ] whileTrue: [            	Dialog warn: ' Incorrecto!.Debe ingresar una cantidad mayor a 0. '.      	 ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].</do-it><do-it>[                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '2:27:12 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 2:27:12 pm on November 14, 2023."</do-it><do-it>Alumno organization addCategory: #obtenerFinalesAprobadosAnio</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerFinalesAprobadosAnio</category><body package="BOSS" selector="obtenerFinalesAprobadosAnio:">obtenerFinalesAprobadosAnio: anio	" Busca la cantidad de finales aprobados en un año dado. "		| finalesAprobadosAnio |	finalesAprobadosAnio := self getFinalesAprobados		select: [:finalAprobado | finalAprobado getFecha = anio].	^finalesAprobadosAnio size</body></methods><methods><class-id>Core.Alumno</class-id> <category>obtenerFinalesAprobadosAnio</category><body package="BOSS" selector="obtenerFinalesAprobadosAnio:">obtenerFinalesAprobadosAnio: anio	" Busca la cantidad de finales aprobados en un año dado. "		| finalesAprobadosAnio |	finalesAprobadosAnio := self getFinalesAprobados		select: [:finalAprobado | finalAprobado getFecha = anio].	^finalesAprobadosAnio size</body></methods><do-it>alumno obtenerFinalesAprobadosAnio: anioFinales</do-it><do-it>alumno obtenerFinalesAprobadosAnio: anioFinales</do-it><do-it>anioFinales</do-it><do-it>alumno obtenerFinalesAprobadosAnio: anioFinales</do-it><do-it>cantidadFinalesAprobados</do-it><do-it>cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger</do-it><do-it>cantidadFinalesAprobados</do-it><do-it>Dialog warn: 'Finished Saving the Super Important Data'.</do-it><do-it>Dialog warn: 'La cantidad de exámenes finales aprobados en el ,anioFinales, es igual a cantidadFinalesAprobados'.</do-it><do-it>Dialog warn: 'La cantidad de exámenes finales aprobados en el ,anioFinales, es igual a cantidadFinalesAprobados'.</do-it><do-it>MyTranscript 		show: 'Grocery List'; cr;		tab; show: 'Milk'; cr;		tab; show: 'Eggs'; cr;		tab; show: 'Jalapenos'.</do-it><do-it>Alumno organization addCategory: #piensaRendir</do-it><methods><class-id>Core.Alumno</class-id> <category>piensaRendir</category><body package="BOSS" selector="piensaRendir:and:">piensaRendir: materia and: anio     " Retorna true si el alumno piensa rendir el final de la materia dada en el       año indicado.  "         ^self getFinalesNoAprobados         select: [:finalNoAprobado |             finalNoAprobado getMateria = materia and:            [finalNoAprobado getAñoPiensaRendir = anio]        ] size &gt; 0.</body></methods><methods><class-id>Core.Alumno</class-id> <category>piensaRendir</category><body package="BOSS" selector="piensaRendir:and:">piensaRendir: materia and: anio     " Retorna true si el alumno piensa rendir el final de la materia dada en el       año indicado.  "         ^self getFinalesNoAprobados         select: [:finalNoAprobado |             finalNoAprobado getMateria = materia and:            [finalNoAprobado getAñoPiensaRendir = anio]        ] size &gt; 0.</body></methods><methods><class-id>Core.Alumno</class-id> <category>piensaRendir</category><body package="BOSS" selector="piensaRendir:and:">piensaRendir: materia and: anio     " Retorna true si el alumno piensa rendir el final de la materia dada en el       año indicado.  "         | var |	var := self getFinalesNoAprobados         select: [:finalNoAprobado |             finalNoAprobado getMateria = materia and:            [finalNoAprobado getAñoPiensaRendir = anio]        ] 	var size &gt; 0.</body></methods><methods><class-id>Core.Alumno</class-id> <category>piensaRendir</category><body package="BOSS" selector="piensaRendir:and:">piensaRendir: materia and: anio     " Retorna true si el alumno piensa rendir el final de la materia dada en el       año indicado.  "         | var |	var := self getFinalesNoAprobados         select: [:finalNoAprobado |             finalNoAprobado getMateria = materia and:            [finalNoAprobado getAñoPiensaRendir = anio]        ]. 	^var size &gt; 0.</body></methods><do-it>alumno piensaRendir: materiaRendir and: anioPiensanRendir.</do-it><do-it>cantidadPiensanRendir := alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.].</do-it><do-it>cantidadPiensanRendir</do-it><do-it>cantidadPiensanRendir size.</do-it><do-it>cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size. </do-it><do-it>cantidadPiensanRendir</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.</do-it><do-it>anioFinales asString.</do-it><do-it>cantidadFinalesAprobados asString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.]. </do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.]. </do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.]. </do-it><do-it>anioFinales</do-it><do-it>cantidadFinalesAprobados</do-it><do-it>Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>Transcript show:     'Cantidad de alumnos que piensan rendir ', materiaRendir, ' en ',     anioPiensanRendir printString, ': ',     cantidadPiensanRendir printString;     cr.</do-it><do-it>Transcript show:     'Cantidad de alumnos que piensan rendir ', materiaRendir, ' en ',     anioPiensanRendir printString, ': ',     cantidadPiensanRendir printString;     cr.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Transcript show:     'Cantidad de alumnos que piensan rendir ', materiaRendir, ' en ',     anioPiensanRendir printString, ': ',     cantidadPiensanRendir printString;     cr.</do-it><do-it>cantidadPiensanRendir</do-it><do-it>Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es de ', cantidadPiensanRendir printString.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es de ', cantidadPiensanRendir printString.</do-it><do-it>Dialog warn: 'Alumnos que piensan rendir ', materiaRendir, 'en el ', anioPiensanRendir printString, ':', cantidadPiensanRendir printString.</do-it><do-it>Dialog warn: 'Alumnos que piensan rendir', materiaRendir, ' en el ', anioPiensanRendir printString, ':', cantidadPiensanRendir printString.</do-it><do-it>Dialog warn: 'Alumnos que piensan rendir', materiaRendir, ' en el ', anioPiensanRendir printString, ' : ', cantidadPiensanRendir printString.</do-it><do-it>Dialog warn: 'La cantidad de alumnos que piensan rendir', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>alumno getCursadas</do-it><do-it>alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'    ]) size.    ausentes := (cursadasMateria size) - (aprobados + desaprobados).].</do-it><do-it>alumnos</do-it><do-it>materia</do-it><do-it>aprobados</do-it><do-it>desaprobados</do-it><do-it>ausentes</do-it><do-it>aprobados</do-it><do-it>MyTranscript 		show: 'Grocery List'; cr;		tab; show: 'Milk'; cr;		tab; show: 'Eggs'; cr;		tab; show: 'Jalapenos'.</do-it><do-it>Dialog warn: 'Finished Saving the\Super Important Data' withCRs.</do-it><do-it>Dialog warn: 'Finished Saving the\Super Important Data' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'\ Aprobados: ', aprobados printString, 	'\ Desaprobados: ', desaprobados printString, 	'\ Ausentes: ',ausentes printString.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'\ Aprobados: ', aprobados printString, 	'\ Desaprobados: ', desaprobados printString, 	'\ Ausentes: ',ausentes printString withCRs.</do-it><do-it>Dialog warn: 'Finished Saving the Super Important Data'.</do-it><do-it>Dialog warn: 'Finished Saving the\Super Important Data'.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'\ Aprobados: ', aprobados printString, 	'\ Desaprobados: ', desaprobados printString, 	'\ Ausentes: ',ausentes printString,'' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'\ Aprobados: ', aprobados printString, 	'\ Desaprobados: ', desaprobados printString, 	'\ Ausentes: ',ausentes printString,'' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'\ Aprobados: ', aprobados printString, 	'\ Desaprobados: ', desaprobados printString, 	'\ Ausentes: ',ausentes printString,'' withCRs.</do-it><do-it>Dialog warn: 'Finished Saving the\Super Important Data' withCRs.</do-it><do-it>Dialog warn: 'Resultados de ', materia,     '\ Aprobados: ', aprobados printString,     '\ Desaprobados: ', desaprobados printString,     '\ Ausentes: ', ausentes printString.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'\ Aprobados: ', aprobados printString, 	'\ Desaprobados: ', desaprobados printString, 	'\ Ausentes: ',ausentes printString,'' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, '\ Aprobados: ' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, '\ Aprobados: ', aprobados printString, '\ Desaprobados: ', desaprobados printString, '\ Ausentes: ',ausentes printString,'' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, '\ Aprobados: ', aprobados printString, '\ Desaprobados: ' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, '\ Aprobados: ' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, '\ Aprobados: ', aprobados printString, '' withCRs.</do-it><do-it>Dialog warn: 'Resultados de', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>Alumno organization addCategory: #calcularPromedioFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales">calcularPromedioFinales	"Calcula el promedio entre los examenes finales."    | sumatoriaAprobados sumatoriaDesaprobados finalesDesaprobados |	sumatoriaAprobados := 0.    finalesAprobados := self getFinalesAprobados.    finalesAprobados do: [:finalAprobado |        sumatoriaAprobados := sumatoriaAprobados + (finalAprobado getCalificacion).    ].    sumatoriaDesaprobados := 0.    finalesDesaprobados := self getFinalesNoAprobados.    finalesDesaprobados do: [:finalDesaprobado |        sumatoriaDesaprobados := sumatoriaDesaprobados + (finalDesaprobado getCalificacion).    ].    ^ (sumatoriaAprobados / (finalesAprobados size)) + (sumatoriaDesaprobados / (finalesDesaprobados size)).</body></methods><do-it>Alumno organization addCategory: #obtenerCalificacionAltaFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerCalificacionAltaFinales</category><body package="BOSS" selector="obtenerCalificacionAltaFinales">obtenerCalificacionAltaFinales    "Retorna la calificacion mas alta obtenida por el alumno."    self getFinalesAprobados collect:[:finalAprobado |        finalAprobado getCalificacion    ]  asSortedCollection last.</body></methods><do-it>Alumno organization addCategory: #obtenerCalificacionBajaFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerCalificacionBajaFinales</category><body package="BOSS" selector="obtenerCalificacionBajaFinales">obtenerCalificacionBajaFinales    "Retorna la calificacion mas baja obtenida por el alumno."    self getFinalesNoAprobados collect:[:finalNoAprobado |        finalNoAprobado getCalificacion    ]  asSortedCollection first.</body></methods><do-it>alumno getFinalesAprobados</do-it><do-it>alumno getFinalesAprobados</do-it><do-it>(alumno getFinalesAprobados) size.</do-it><do-it>finalAprobado</do-it><do-it>finalAprobado getCalificacion</do-it><do-it>finalAprobado</do-it><do-it>(finalAprobado getCalificacion) asInteger.</do-it><do-it>finalesDesaprobados</do-it><do-it>| sumatoriaAprobados sumatoriaDesaprobados finalesDesaprobados |	sumatoriaAprobados := 0.    finalesAprobados := alumno getFinalesAprobados.    finalesAprobados do: [:finalAprobadox |        finalAprobado := finalAprobadox. 	   sumatoriaAprobados := sumatoriaAprobados + (finalAprobado getCalificacion) asInteger.    ].</do-it><do-it>finalesDesaprobados</do-it><do-it>finalesDesaprobados</do-it><do-it>finalesDesaprobados</do-it><do-it>finalesDesaprobados</do-it><do-it>(finalAprobado getCalificacion) asInteger.</do-it><do-it>(finalAprobado getCalificacion) asInteger.</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales">calcularPromedioFinales	"Calcula el promedio entre los examenes finales."    | sumatoriaAprobados |	sumatoriaAprobados := 0.    finalesAprobados := self getFinalesAprobados.    finalesAprobados do: [:finalAprobado |        sumatoriaAprobados := sumatoriaAprobados + (finalAprobado getCalificacion).    ].    ^ sumatoriaAprobados / (finalesAprobados size).</body></methods><do-it>finalAprobado getCalificacion.</do-it><do-it>(alumno getFinalesAprobados collect:[:finalAprobadox |        finalAprobado := finalAprobadox. 	   finalAprobado getCalificacion.    ])  asSortedCollection last.</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerCalificacionAltaFinales</category><body package="BOSS" selector="obtenerCalificacionAltaFinales">obtenerCalificacionAltaFinales    "Retorna la calificacion mas alta obtenida por el alumno."    (self getFinalesAprobados collect:[:finalAprobado |        finalAprobado getCalificacion    ])  asSortedCollection last.</body></methods><methods><class-id>Core.Alumno</class-id> <category>obtenerCalificacionAltaFinales</category><body package="BOSS" selector="obtenerCalificacionAltaFinales">obtenerCalificacionAltaFinales    "Retorna la calificacion mas alta obtenida por el alumno."    ^(self getFinalesAprobados collect:[:finalAprobado |        finalAprobado getCalificacion    ])  asSortedCollection last.</body></methods><methods><class-id>Core.Alumno</class-id> <category>obtenerCalificacionBajaFinales</category><body package="BOSS" selector="obtenerCalificacionBajaFinales">obtenerCalificacionBajaFinales    "Retorna la calificacion mas baja obtenida por el alumno."    ^(self getFinalesNoAprobados collect:[:finalNoAprobado |        finalNoAprobado getCalificacion    ])  asSortedCollection first.</body></methods><methods><class-id>Core.Alumno</class-id> <category>obtenerCalificacionBajaFinales</category><body package="BOSS" selector="obtenerCalificacionBajaFinales">obtenerCalificacionBajaFinales    "Retorna la calificacion mas baja obtenida por el alumno."    ^(self getFinalesAprobados collect:[:finalAprobado |        finalAprobado getCalificacion    ])  asSortedCollection first.</body></methods><do-it>"Dado un número de documento, indique la cantidad de materias aprobadas, el promedio de calificaciones, y las calificaciones más baja y más alta obtenidas." dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.</do-it><do-it>alumno obtenerCalificacionAltaFinales.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'    ]) size.    ausentes := (cursadasMateria size) - (aprobados + desaprobados).].Dialog warn: 'Finished Saving the\Super Important Data' withCRs.Dialog warn: 'Resultados de', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'    ]) size.    ausentes := (cursadasMateria size) - (aprobados + desaprobados).].Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>aprobados</do-it><do-it>desaprobados</do-it><do-it>ausentes</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'    ]) size.    ausentes := (cursadasMateria size) - (aprobados + desaprobados).].Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>(alumno getFinalesAprobados) size.</do-it><do-it>(alumno getFinalesAprobados) size.</do-it><do-it>alumno calcularPromedioFinales.	</do-it><do-it>alumno obtenerCalificacionAltaFinales.</do-it><do-it>alumno obtenerCalificacionBajaFinales.</do-it><do-it>alumno obtenerCalificacionAltaFinales.</do-it><do-it>alumno calcularPromedioFinales.	</do-it><do-it>promedio printString</do-it><do-it>alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.</do-it><do-it>cantidadAprobadas</do-it><do-it>dni</do-it><do-it>cantidadAprobadas printString</do-it><do-it>promedio printString</do-it><do-it>calificacionAlta printString</do-it><do-it>calificacionBaja printString</do-it><do-it>'. Calificacion mas baja: ', calificacionBaja printString</do-it><do-it>Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>Dialog warn: 'Resultados de ', dni printString, 	'. Materias aprobadas: ', cantidadAprobadas printString, 	'. Promedio: ', promedio printString, 	'. Calificacion mas alta: ', calificacionAlta printString,     '. Calificacion mas baja: ', calificacionBaja printString.</do-it><do-it>"Dado un número de documento, indique la cantidad de materias aprobadas, el promedio de calificaciones, y las calificaciones más baja y más alta obtenidas." dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados de ', dni printString, 	'. Materias aprobadas: ', cantidadAprobadas printString, 	'. Promedio: ', promedio printString, 	'. Calificacion mas alta: ', calificacionAlta printString,     '. Calificacion mas baja: ', calificacionBaja printString.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'    ]) size.    ausentes := (cursadasMateria size) - (aprobados + desaprobados).].Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'    ]) size.    ausentes := (cursadasMateria size) - (aprobados + desaprobados).].Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.alumnos do: [:alumnox |     alumno := alumnox. cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'    ]) size.    ausentes := ausentes + (cursadasMateria size) - (aprobados + desaprobados).].Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>cursadasMateria size</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'    ]) size.    cursadas := cursadas + 1.].ausentes := ausentes + cursadas - (aprobados + desaprobados).Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>"Dado un número de documento, indique la cantidad de materias aprobadas, el promedio de calificaciones, y las calificaciones más baja y más alta obtenidas." dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados de ', dni printString, 	'. Materias aprobadas: ', cantidadAprobadas printString, 	'. Promedio: ', promedio printString, 	'. Calificacion mas alta: ', calificacionAlta printString,     '. Calificacion mas baja: ', calificacionBaja printString.</do-it><do-it>Alumno organization addCategory: #aproboCursadaConFinal</do-it><methods><class-id>Core.Alumno</class-id> <category>aproboCursadaConFinal</category><body package="BOSS" selector="aproboCursadaConFinal:">aproboCursadaConFinal: materia    "Determina si el alumno aprobo la cursada y el final de una materia."    | finalEstaAprobado cursadaEstaAprobada |	finalEstaAprobado := (self getFinalesAprobados select: [:finalAprobado |        finalAprobado getMateria = materia.    ]) size &gt; 0.    cursadaEstaAprobada := (self getCursadas select: [:cursada |        cursada getMateria = materia and:        [cursada getResultado = 'Aprobado'].    ]) size &gt; 0.    ^finalEstaAprobado and: [cursadaEstaAprobada].</body></methods><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := (aprobados size / alumnos size) * 100.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := (aprobados size / alumnos size) * 100.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := (aprobados size / alumnos size) * 100.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>Alumno organization addCategory: #calcularPromedioCursadas</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: materia    "Calcula el promedio ente las calificaciones de las cursadas, dada una materia."    | cursadasMateria sumatoria |	cursadasMateria := self getCursadas select: [:cursada |        cursada getMateria = materia.    ].    sumatoria := 0.    cursadasMateria do: [:cursada |        sumatoria := sumatoria + (cursada getCalificacion).    ].    ^ sumatoria / (cursadasMateria size).</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '6:56:48 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 6:56:48 pm on November 14, 2023."</do-it><do-it>Alumno organization addCategory: #cursoMateria</do-it><methods><class-id>Core.Alumno</class-id> <category>cursoMateria</category><body package="BOSS" selector="cursoMateria:">cursoMateria: materia    "Indica si el alumno curso la materia dada."    ^(self getCursadas select: [:cursada |        cursada getMateria = materia.    ]) size &gt; 0.</body></methods><methods><class-id>Core.Alumno</class-id> <category>cursoMateria</category><body package="BOSS" selector="cursoMateria:">cursoMateria: materia    "Indica si el alumno curso la materia dada."    ^(self getCursadas select: [:cursada |        cursada getMateria = materia.    ]) size &gt; 0.</body></methods><do-it>Alumno organization addCategory: #calcularPromedioFinales</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales:">calcularPromedioFinales: materia"Calcula el promedio entre los examenes finales."    | sumatoriaAprobados |	sumatoriaAprobados := 0.    finalesAprobados := self getFinalesAprobados select: [:finalAprobado |        finalAprobado getMateria = materia.    ].    finalesAprobados do: [:finalAprobado |        sumatoriaAprobados := sumatoriaAprobados + (finalAprobado getCalificacion).    ].    ^ sumatoriaAprobados / (finalesAprobados size).</body></methods><do-it>"Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.].sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  sumatoriaFinales / (promedioFinales size).promediosCursadas := alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.].sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := sumatoriaCursadas / (promediosCursadas size). Dialog warn:     'Resultados para la materia ', materia,    'Promedio de calificaciones de la cursada: ',     promedioCursadasTotal printString,    'Promedio de calificaciones de examenes finales: ',     promedioFinalesTotal printString.</do-it><do-it>Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>Dialog warn: 'Resultados para la materia', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>(sumatoriaCursadas / (promediosCursadas size)) asFloat. </do-it><do-it>Dialog warn: 'Resultados para la materia ', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>"Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.].sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  sumatoriaFinales / (promedioFinales size).promediosCursadas := alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.].sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.Dialog warn: 'Resultados para la materia ', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>"Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.].sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  sumatoriaFinales / (promedioFinales size).promediosCursadas := alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.].sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.Dialog warn: 'Resultados para la materia ', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>(sumatoriaFinales / (promedioFinales size)) asFloat.</do-it><do-it>"Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.].sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.promediosCursadas := alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.].sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.Dialog warn: 'Resultados para la materia ', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'    ]) size.    cursadas := cursadas + 1.].ausentes := ausentes + cursadas - (aprobados + desaprobados).Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>alumno getCursadas</do-it><do-it>(cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 	'. Aprobados: ', aprobados printString, 	'. Desaprobados: ', desaprobados printString, 	'. Ausentes: ',ausentes printString.</do-it><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := (aprobados size / alumnos size) * 100.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := (2 / 3) * 100.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>((2 / 3) * 100) asFloat.</do-it><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := ((2 / 3) * 100) asFloat.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.porcentaje := (aprobados size / alumnos size) * 100.</do-it><do-it>" Para una determinada materia, porcentaje de alumnos que aprobaron la cursada y el examen final. "materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ).aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := ((aprobados size / alumnos size) * 100) asFloat.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>"Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.].sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.promediosCursadas := alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.].sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.Dialog warn: 'Resultados para la materia ', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '7:30:04 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 7:30:04 pm on November 14, 2023."</do-it><do-it>Alumno organization addCategory: #obtenerCantidadCursadas</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerCantidadCursadas</category><body package="BOSS" selector="obtenerCantidadCursadas:">obtenerCantidadCursadas: materia    "Retorna la cantidad de veces que el alumno curso la materia."    ^(self getCursadas select: [:cursada |            cursada getMateria = materia.        ]) size.</body></methods><do-it>alumno getCursadas</do-it><do-it>cantidadEncuestas := (Dictionary new).</do-it><do-it>cantidadEncuestas includesKey: materia</do-it><do-it>cadena := cantidadEncuestas keysAndValuesDo: [:mat :cant |        mat printString, ': ',  cant printString.     ].</do-it><do-it>cadena</do-it><do-it>cadena := ''.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat printString, ': ',  cant printString.     ].</do-it><do-it>cadena</do-it><do-it>cadena := ''.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat, ': ',  cant.     ].</do-it><do-it>cadena</do-it><do-it>cadena</do-it><do-it>cantidadEncuestas</do-it><do-it>alumnos</do-it><do-it>materias</do-it><do-it>cantidadEncuestas includesKey: materia</do-it><do-it>materia</do-it><do-it>cantidadEncuestas</do-it><do-it>materia</do-it><do-it>cantidad</do-it><do-it>cantidad</do-it><do-it>materia</do-it><do-it>alumno obtenerCantidadCursadas: materia</do-it><do-it>cantidad</do-it><do-it>alumnos</do-it><do-it>alumno</do-it><do-it>materias</do-it><do-it>cursada</do-it><do-it>cursada getMateria.</do-it><do-it>materias</do-it><do-it>materias addAll: (alumno getCursadas collect: [:cursadax |        cursada := cursadax. 	   cursada getMateria.    ]) asSet.</do-it><do-it>materias</do-it><do-it>Alumno organization addCategory: #obtenerFinalesNoAprobados</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerFinalesNoAprobados</category><body package="BOSS" selector="obtenerFinalesNoAprobados">obtenerFinalesNoAprobados	"Busca la cantidad de finales que se van a pensar a rendir en 2024" | cantiEstimadaARendir porcentajeLibre cantiTotalNoAprobados |	porcentajeLibre := 0.    cantiEstimadaARendir := self getFinalesNoAprobados.      self select: [:finalNoAprobado | finalNoAprobado getAñoPiensaRendir = 2024].    cantiTotalNoAprobados:=cantiEstimadaARendir size. 	porcentajeLibre := (cantiTotalNoAprobados * 0.25) floor.	^cantiEstimadaARendir := cantiEstimadaARendir + porcentajeLibre.</body></methods><methods><class-id>Core.Alumno</class-id> <category>obtenerFinalesNoAprobados</category><body package="BOSS" selector="obtenerFinalesNoAprobados">obtenerFinalesNoAprobados	"Busca la cantidad de finales que se van a pensar a rendir en 2024" | cantiEstimadaARendir porcentajeLibre cantiTotalNoAprobados |	porcentajeLibre := 0.    cantiEstimadaARendir := self getFinalesNoAprobados select: [:finalNoAprobado | finalNoAprobado getAñoPiensaRendir = 2024].    cantiTotalNoAprobados:=cantiEstimadaARendir size. 	porcentajeLibre := (cantiTotalNoAprobados * 0.25) floor.	^cantiEstimadaARendir := cantiEstimadaARendir + porcentajeLibre.</body></methods><methods><class-id>Core.Alumno</class-id> <category>obtenerFinalesNoAprobados</category><body package="BOSS" selector="obtenerFinalesNoAprobados">obtenerFinalesNoAprobados	"Busca la cantidad de finales que se van a pensar a rendir en 2024" | cantiEstimadaARendir porcentajeLibre cantiTotalNoAprobados |	porcentajeLibre := 0.    cantiEstimadaARendir := self getFinalesNoAprobados select: [:finalNoAprobado | finalNoAprobado getAñoPiensaRendir = 2024].    cantiTotalNoAprobados:=(cantiEstimadaARendir size) asFloat. 	porcentajeLibre := (cantiTotalNoAprobados * 0.25) asFloat.	^cantiEstimadaARendir := cantiEstimadaARendir + porcentajeLibre.</body></methods><do-it>alumno</do-it><do-it>| cantiEstimadaARendir porcentajeLibre cantiTotalNoAprobados |	porcentajeLibre := 0.    cantiEstimadaARendir := alumno getFinalesNoAprobados select: [:finalNoAprobadox | finalNoAprobado := finalNoAprobadox. finalNoAprobado getAñoPiensaRendir = 2024].</do-it><do-it>porcentajeLibre := 0.    cantiEstimadaARendir := alumno getFinalesNoAprobados select: [:finalNoAprobadox | finalNoAprobado := finalNoAprobadox. finalNoAprobado getAñoPiensaRendir = 2024].    cantiTotalNoAprobados:=(cantiEstimadaARendir size) asFloat. 	porcentajeLibre := (cantiTotalNoAprobados * 0.25) asFloat.</do-it><do-it>porcentajeLibre</do-it><do-it>cantiEstimadaARendir</do-it><do-it>(cantiEstimadaARendir size) asFloat. </do-it><do-it>cantiEstimadaARendir</do-it><do-it>cantiEstimadaARendir size</do-it><do-it>cantiTotalNoAprobados</do-it><do-it>porcentajeLibre</do-it><do-it>cantiEstimadaARendir</do-it><do-it>cantiEstimadaARendir := cantiTotalNoAprobados + porcentajeLibre.</do-it><methods><class-id>Core.Alumno</class-id> <category>obtenerFinalesNoAprobados</category><body package="BOSS" selector="obtenerFinalesNoAprobados">obtenerFinalesNoAprobados	"Busca la cantidad de finales que se van a pensar a rendir en 2024" | cantiEstimadaARendir porcentajeLibre cantiTotalNoAprobados |	porcentajeLibre := 0.    cantiEstimadaARendir := self getFinalesNoAprobados select: [:finalNoAprobado | finalNoAprobado getAñoPiensaRendir = 2024].    cantiTotalNoAprobados:=(cantiEstimadaARendir size) asFloat. 	porcentajeLibre := (cantiTotalNoAprobados * 0.25) asFloat.	^cantiEstimadaARendir := cantiTotalNoAprobados + porcentajeLibre.</body></methods><do-it>"Estimacion de alumnos que rendiran un final en 2024"cantidadAlumnosARendir := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadAlumnosARendir := cantidadAlumnosARendir + (alumno obtenerFinalesNoAprobados) asInteger.].Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir printString.</do-it><do-it>"Estimacion de alumnos que rendiran un final en 2024"cantidadAlumnosARendir := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadAlumnosARendir := cantidadAlumnosARendir + (alumno obtenerFinalesNoAprobados) asInteger.].Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir printString.</do-it><do-it>cantidadAlumnosARendir</do-it><do-it>alumno obtenerFinalesNoAprobados</do-it><do-it>cantidadFinalesAprobados</do-it><do-it>materia</do-it><do-it>cantidadFinalesAprobados</do-it><do-it>materia</do-it><do-it>" Las materias con menos y más exámenes finales aprobados. "cantidadFinalesAprobados := (Dictionary new).alumnos do: [:alumnox |     alumno := alumnox. alumno getFinalesAprobados do: [:finalAprobadox |        finalAprobado := finalAprobadox. materia := finalAprobado getMateria.          (cantidadFinalesAprobados includesKey: materia) ifTrue: [            cantidad := (cantidadFinalesAprobados at: materia) + 1.            cantidadFinalesAprobados at: materia put: cantidad.        ] ifFalse: [            cantidadFinalesAprobados at: materia put: 1.        ].    ].].cantFinalesAprob := cantidadFinalesAprobados values asSortedCollection.maxAprobados := cantFinalesAprob last.minAprobados := cantFinalesAprob first.materiaMaxAprobados := cantidadFinalesAprobados keyAtValue: maxAprobados.materiaMinAprobados := cantidadFinalesAprobados keyAtValue: minAprobados.</do-it><do-it>materiaMaxAprobados</do-it><do-it>materiaMinAprobados</do-it><do-it>cantidadFinalesAprobados</do-it><do-it>maxAprobados</do-it><do-it>maxAprobados</do-it><do-it>minAprobados</do-it><do-it>Dialog warn: 'La materia con mas examenes aprobados es ', materiaMaxAprobados,  ' con ', maxAprobados printString,	'. La materia con menos examenes aprobados es ', materiaMinAprobados, ' con ', minAprobados printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 14, 2023' '8:52:55 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 8:52:55 pm on November 14, 2023."</do-it><do-it>Alumno organization addCategory: #desaproboCursada</do-it><methods><class-id>Core.Alumno</class-id> <category>desaproboCursada</category><body package="BOSS" selector="desaproboCursada:">desaproboCursada: materia	"Determina si el alumno desaprobo la cursada y el final de una materia."		| finalEstaNoAprobado cursadaEstaDesaprobada |	finalEstaNoAprobado := (self getFinalesAprobados		select: [:finalAprobado | finalAprobado getMateria = materia]) size = 0.	cursadaEstaDesaprobada := (self getCursadas		select:			[:cursada | 			cursada getMateria = materia				and:					[cursada getResultado = 'Desaprobado'						or: [cursada getResultado = 'Ausente']]]) size &gt; 0.	^finalEstaNoAprobado and: [cursadaEstaDesaprobada]</body></methods><do-it>"Estimación de alumnos que cursarán una materia en 2024: se obtiene sumando todos los alumnos que desaprobaron la cursada o estuvieron ausentes y obviamente aún no aprobaron el examen final. A ese subtotal se le debe agregar un 50%, que son los alumnos que cursarán la materia por primera vez. "materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ).desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar', materia printString,     ' en 2024 es  ', desaprobados printString.</do-it><do-it>"Estimación de alumnos que cursarán una materia en 2024: se obtiene sumando todos los alumnos que desaprobaron la cursada o estuvieron ausentes y obviamente aún no aprobaron el examen final. A ese subtotal se le debe agregar un 50%, que son los alumnos que cursarán la materia por primera vez. "materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ).desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es  ', desaprobados printString.</do-it><do-it>"Estimación de alumnos que cursarán una materia en 2024: se obtiene sumando todos los alumnos que desaprobaron la cursada o estuvieron ausentes y obviamente aún no aprobaron el examen final. A ese subtotal se le debe agregar un 50%, que son los alumnos que cursarán la materia por primera vez. "materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ).desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>Alumno organization addCategory: #calcularFinalesNoAprobados</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularFinalesNoAprobados</category><body package="BOSS" selector="calcularFinalesNoAprobados:">calcularFinalesNoAprobados: anio	"Calcula la cantidad de finales que se estiman rendir en el 2024."        | cantiTotalNoAprobados |	    cantiTotalNoAprobados := 0.0.    cantiTotalNoAprobados := ((self getFinalesNoAprobados select: [:finalNoAprobado |         finalNoAprobado getAñoPiensaRendir = anio.    ]) size) asFloat.    	^cantiTotalNoAprobados * 1.25.</body></methods><do-it>"Estimacion de alumnos que rendiran un final en 2024"cantidadAlumnosARendir := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadAlumnosARendir := cantidadAlumnosARendir + (alumno calcularFinalesNoAprobados: 2024) asInteger.		"REVISAR!!!! CREO QUE NO OBTIENE BIEN LOS FINALES NO APROBADOS DE LA MATERIA"].Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir printString.</do-it><do-it>cantidadAlumnosARendir</do-it><do-it>alumno calcularFinalesNoAprobados: 2024</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '2:36:15 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 2:36:15 am on November 15, 2023."</do-it><do-it>anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	***This is decompiled code.*** 	No source was available"	| t2 |	t2 := 0.0.	(cursadas := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	cursadas size = 0 ifTrue: [^nil].	^t2 / cursadas size asFloat</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales:">calcularPromedioFinales: t1 	"	***This is decompiled code.*** 	No source was available"	| t2 |	t2 := 0.0.	(finalesAprobados := self getFinalesAprobados select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	finalesAprobados size = 0 ifTrue: [^nil].	^t2 / finalesAprobados size asFloat</body></methods><do-it>" Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.Dialog warn: 'Resultados para la materia ', materia, 	'. Promedio de calificaciones de la cursada: ', promedioCursadasTotal printString, 	'. Promedio de calificaciones de examenes finales: ', promedioFinalesTotal printString.</do-it><do-it>"Estimacion de alumnos que rendiran un final en 2024"

cantidadAlumnosARendir := 0.
alumnos do: [:alumnox | 
    alumno := alumnox. 
    cantidadAlumnosARendir := cantidadAlumnosARendir + (alumno calcularFinalesNoAprobados: 2024).
].

Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir asInteger printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '10:27:17 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 10:27:17 am on November 15, 2023."</do-it><do-it>alumno calcularFinalesNoAprobados: 2024</do-it><do-it>Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir asFloat printString.</do-it><do-it>Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir asInteger printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '10:35:48 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 10:35:48 am on November 15, 2023."</do-it><do-it>cadena := ''.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat, ': ',  cant.     ].</do-it><do-it>cadena := ''.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat, ': ',  cant.     ].</do-it><do-it>Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>Dialog warn: 'Resultados de ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><do-it>Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><do-it>Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>Dialog warn: 'Resultados para la materia ', materia, 
	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 
	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>" Dada una materia, indicar el promedio de las calificaciones de cursada y el promedio de calificaciones en los exámenes finales. "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox. sumatoriaFinales := sumatoriaFinales + promedio. ].promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat roundTo: 0.01.promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox. alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox. sumatoriaCursadas := sumatoriaCursadas + promedio. ].promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat roundTo: 0.01.Dialog warn: 'Resultados para la materia ', materia, 
	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 
	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>"Dado un número de documento, indique la cantidad de materias aprobadas, el promedio de calificaciones, y las calificaciones más baja y más alta obtenidas." dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><do-it>"Estimación de alumnos que cursarán una materia en 2024: se obtiene sumando todos los alumnos que desaprobaron la cursada o estuvieron ausentes y obviamente aún no aprobaron el examen final. A ese subtotal se le debe agregar un 50%, que son los alumnos que cursarán la materia por primera vez. "materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ).desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>"Estimación de alumnos que cursarán una materia en 2024: se obtiene sumando todos los alumnos que desaprobaron la cursada o estuvieron ausentes y obviamente aún no aprobaron el examen final. A ese subtotal se le debe agregar un 50%, que son los alumnos que cursarán la materia por primera vez. "materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ).desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '10:57:48 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 10:57:48 am on November 15, 2023."</do-it><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [        anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.        anioPiensaFinal asInteger.        (anioPiensaFinal isNil or: [anioPiensaFinal between: 2010 and: 2023] )] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor entre 2010 y 2023)'.        ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := false.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].	(alumno getCursadas isNil) ifFalse: [		alumno getCursadas do: [:cursadasGuardadas |        		(cursadasGuardadas getMateria = materia and: [cursadasGuardadas getAño = anio]) ifTrue:[            "cursada ya ingresada"            cursadaIngresada := true.            Dialog warn: 'Esta materia y año ya fueron ingresados.'.        		]    		].	] ifTrue: [		alumno getDni.	].    [(cursadaIngresada not or: [anio isNil or: [anio between: 2010 and: 2023]])] whileFalse: [                 Dialog warn: ' Año erroneo. Ingrese el año de cursado de la materia (valor entre 2010 y 2023)'.        ].            (cursada isNil) ifTrue: [        cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    ].    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>cursadaIngresada := false.</do-it><do-it>[cursadaIngresada] whileFalse: [		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada, ingrese otra materia.'.        			]    			].		].	].</do-it><do-it>cursadaIngresada</do-it><do-it>cursadaIngresada := true.</do-it><do-it>[cursadaIngresada] whileTrue: [		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada, ingrese otra materia.'.        			]    			].		].	].</do-it><do-it>cursadaIngresada</do-it><do-it>materia</do-it><do-it>materia</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '12:06:09 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 12:06:09 pm on November 15, 2023."</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '12:24:31 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 12:24:31 pm on November 15, 2023."</do-it><do-it>" Cantidad de encuestas ingresadas, discriminadas por materia "materias := Set new.alumnos do: [:alumnox |     alumno := alumnox.     materias addAll: (alumno getCursadas collect: [:cursadax |        cursada := cursadax. 	   cursada getMateria.    ]) asSet.]. cantidadEncuestas := (Dictionary new).materias do: [:materiax |    materia := materiax. alumnos do: [:alumnox |		alumno := alumnox. 		cantidad := alumno obtenerCantidadCursadas: materia.        (cantidadEncuestas includesKey: materia) ifTrue: [            cantidadEncuestas at: materia put: (cantidadEncuestas at: materia) + cantidad.        ] ifFalse: [            cantidadEncuestas at: materia put: cantidad.        ].    ].]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat printString, ': ',  cant printString, ' '.     ]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |    cadena := cadena, mat printString, ': ', cant printString, ' '.].Dialog warn: 'Cantidad de encuestas ingresadas, discriminadas por materia: ', cadena.</do-it><do-it>" Cantidad de encuestas ingresadas, discriminadas por materia "materias := Set new.alumnos do: [:alumnox |     alumno := alumnox.     materias addAll: (alumno getCursadas collect: [:cursadax |        cursada := cursadax. 	   cursada getMateria.    ]) asSet.]. cantidadEncuestas := (Dictionary new).materias do: [:materiax |    materia := materiax. alumnos do: [:alumnox |		alumno := alumnox. 		cantidad := alumno obtenerCantidadCursadas: materia.        (cantidadEncuestas includesKey: materia) ifTrue: [            cantidadEncuestas at: materia put: (cantidadEncuestas at: materia) + cantidad.        ] ifFalse: [            cantidadEncuestas at: materia put: cantidad.        ].    ].]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat printString, ': ',  cant printString, ' '.     ]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |    cadena := cadena, mat asString, ': ', cant printString, '\'.].Dialog warn: 'Cantidad de encuestas ingresadas, discriminadas por materia: \' withCRs, cadena withCRs.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>cursadasMateria</do-it><do-it>cursadasMateria</do-it><do-it>aprobados</do-it><do-it>desaprobados</do-it><do-it>cursadasMateria</do-it><do-it>cursada</do-it><do-it>materia</do-it><do-it>anio</do-it><do-it>alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. cursada getResultado = 'Ausente'.    ]) size."].</do-it><do-it>cursadasMateria</do-it><do-it>aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.</do-it><do-it>desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.</do-it><do-it>cursada</do-it><do-it>cursada getResultado = 'Desaprobado'.</do-it><do-it>cursada getResultado = 'Aprobado'.</do-it><do-it>cursada getResultado = 'Ausente'.</do-it><do-it>desaprobados</do-it><do-it>cursadasMateria</do-it><do-it>promediosCursadas</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>anio</do-it><do-it>materia</do-it><methods><class-id>Core.Cursada</class-id> <category>setMateria</category><body package="BOSS" selector="setMateria:">setMateria: nuevaMateria		materia := nuevaMateria trimBlanks.
	^self</body></methods><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>"Dado un número de documento, indique la cantidad de materias aprobadas, el promedio de calificaciones, y las calificaciones más baja y más alta obtenidas." dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>"  Cantidad de alumnos que piensan rendir la materia en un determinado año. "materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ).anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>" Resumen de resultados de cursada de una materia en un año determinado   (cantidad de aprobados, de desaprobados y de ausentes). "materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    "aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size."].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 
	"	**This is decompiled code.** 
	No source was available"

	| t2 |
	t2 := 0.0.
	(cursadas := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].
	cursadas size = 0 ifTrue: [^nil].
	^t2 / cursadas size asFloat</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales">calcularPromedioFinales	"Calcula el promedio entre los examenes finales."    | sumatoriaAprobados |	sumatoriaAprobados := 0.    finalesAprobados := self getFinalesAprobados.    finalesAprobados do: [:finalAprobado |        sumatoriaAprobados := sumatoriaAprobados + (finalAprobado getCalificacion).    ].		finalesAprobados size = 0 ifTrue: [^nil].    ^ sumatoriaAprobados / (finalesAprobados size).</body></methods><do-it>promediosCursadas size</do-it><do-it>promedioFinales size</do-it><do-it>promedioFinales size</do-it><do-it>"Nadie tiene el final aprobado"</do-it><do-it>promedioFinalesTotal</do-it><do-it>(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].</do-it><do-it>alumno calcularPromedioFinales: materia.</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 |	t2 := 0.0.	(cursadas := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	cursadas size = 0 ifTrue: [^nil].	^t2 / cursadas size </body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 |	t2 := 0.0.	(cursadas := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	cursadas size = 0 ifTrue: [^nil].	^t2 / cursadas size asInteger</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 |	t2 := 0.0.	(cursadas := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	cursadas size = 0 ifTrue: [^nil].	^t2 / cursadas size asNumber</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 |	t2 := 0.0.	(cursadas := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	cursadas size = 0 ifTrue: [^nil].	^t2 / cursadas size asFloat.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales">calcularPromedioFinales	"Calcula el promedio entre los examenes finales."    | sumatoriaAprobados t1 |	sumatoriaAprobados := 0.    t1 := self getFinalesAprobados.    t1 do: [:finalAprobado |        sumatoriaAprobados := sumatoriaAprobados + (finalAprobado getCalificacion).    ].		t1 size = 0 ifTrue: [^nil].    ^ sumatoriaAprobados / (t1 size).</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales:">calcularPromedioFinales: t1 	"	***This is decompiled code.*** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getFinalesAprobados select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat</body></methods><do-it>promedioFinalesTotal</do-it><do-it>promediosCursadas</do-it><do-it>alumno calcularPromedioFinales: materia.</do-it><do-it>alumno calcularPromedioFinales: materia.</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^t2.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^(t2 / t5 size).</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^(t2 / t5 size) asFloat.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^1.2 "(t2 / t5 size) asFloat".</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^1 "(t2 / t5 size) asFloat".</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^1 .</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 self getMateria = t1]) do: [:t4 | t2 := t2 + t4 self getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + (t4 getCalificacion asFloat)].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat.</body></methods><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + (t4 getCalificacion) asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat.</body></methods><do-it>t2</do-it><do-it>t2</do-it><do-it>t5</do-it><do-it>t5 size</do-it><do-it>t5 size asFloat</do-it><do-it>t2</do-it><do-it>t2 / t5 size asFloat</do-it><do-it>prueba</do-it><do-it>t5 size = 0 ifTrue: [prueba := nil]	ifFalse: [prueba := t2 / t5 size asFloat].</do-it><do-it>t5</do-it><do-it>[:t4 | t2 := t2 + t4 getCalificacion]</do-it><do-it>t5</do-it><do-it>alumno getCursadas select: [:t3 | t3 getMateria = materia]</do-it><do-it>probando := (alumno getCursadas select: [:cursadax | cursada := cursadax. cursada getMateria = materia]) collect: [:cursadax| cursada := cursadax. cursada getCalificacion].</do-it><do-it>probando</do-it><do-it>materia</do-it><do-it>probando</do-it><do-it>probando := (alumno getCursadas select: [:cursadax | cursada := cursadax. cursada getMateria = materia]) collect: [:cursadax| cursada := cursadax. cursada getCalificacion].</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioCursadas</category><body package="BOSS" selector="calcularPromedioCursadas:">calcularPromedioCursadas: t1 	"	**This is decompiled code.** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getCursadas select: [:t3 | t3 getMateria = t1 and: [t3 getResultado = 'Aprobado']]) do: [:t4 | t2 := t2 + (t4 getCalificacion) asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat.</body></methods><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox.     sumatoriaFinales := sumatoriaFinales + promedio. ].(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioCursadas: materia.	"ACA DA PROBLEMA!!!!!!!!!!!!!!!!!"	"t2 := 0.	(t5 := alumno getCursadas select: [:t3 | t3 getMateria = materia]) do: [:t4 | t2 := t2 + (t4 getCalificacion) asFloat].	t5 := (alumno getCursadas select: [:t3 | t3 getMateria = materia]) do: [:t4 | t2 := t2 + t4 getCalificacion].	probando := (alumno getCursadas select: [:cursadax | cursada := cursadax. cursada getMateria = materia]) collect: [:cursadax| cursada := cursadax. cursada getCalificacion]. OrderedCollection (7)	t5 size = 0 ifTrue: [prueba := nil]	ifFalse: [prueba := t2 / t5 size asFloat]."]) select: [:promediox |	promedio := promediox. 	promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox.     sumatoriaCursadas := sumatoriaCursadas + promedio. ].(promediosCursadas size = 0) ifTrue: [	promedioCursadasTotal := 'Nadie cursó la materia' .] ifFalse: [	promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.].Dialog warn: 'Resultados para la materia ', materia, 	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><methods><class-id>Core.Alumno</class-id> <category>calcularPromedioFinales</category><body package="BOSS" selector="calcularPromedioFinales:">calcularPromedioFinales: t1 	"	***This is decompiled code.*** 	No source was available"	| t2 t5 |	t2 := 0.0.	(t5 := self getFinalesAprobados select: [:t3 | t3 getMateria = t1]) do: [:t4 | t2 := t2 + t4 getCalificacion asFloat].	t5 size = 0 ifTrue: [^nil].	^t2 / t5 size asFloat</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '4:18:02 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 4:18:02 pm on November 15, 2023."</do-it><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox.     sumatoriaFinales := sumatoriaFinales + promedio. ].(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. 	promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox.     sumatoriaCursadas := sumatoriaCursadas + promedio. ].(promediosCursadas size = 0) ifTrue: [	promedioCursadasTotal := 'Nadie cursó la materia' .] ifFalse: [	promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.].Dialog warn: 'Resultados para la materia ', materia, 	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox.     sumatoriaFinales := sumatoriaFinales + promedio. ].(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. 	promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox.     sumatoriaCursadas := sumatoriaCursadas + promedio. ].(promediosCursadas size = 0) ifTrue: [	promedioCursadasTotal := 'Nadie cursó la materia' .] ifFalse: [	promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.].Dialog warn: 'Resultados para la materia ', materia, 	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' '.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ).promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox.     sumatoriaFinales := sumatoriaFinales + promedio. ].(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. 	promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox.     sumatoriaCursadas := sumatoriaCursadas + promedio. ].(promediosCursadas size = 0) ifTrue: [	promedioCursadasTotal := 'Nadie cursó la materia' .] ifFalse: [	promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.].Dialog warn: 'Resultados para la materia ', materia, 	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>materia := Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ' trimBlanks asUppercase.</do-it><do-it>materia</do-it><do-it>materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ' trimBlanks) asUppercase.</do-it><do-it>materia</do-it><do-it>materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ' trimBlanks) asUppercase.</do-it><do-it>materia</do-it><do-it>materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ') trimBlanks asUppercase.</do-it><do-it>materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ') trimBlanks asUppercase.</do-it><do-it>materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ) trimBlanks asUppercase.</do-it><do-it>cantidadAlumnosARendir := 0.
alumnos do: [:alumnox | 
    alumno := alumnox. 
    cantidadAlumnosARendir := cantidadAlumnosARendir + (alumno calcularFinalesNoAprobados: 2024).
].

Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir asInteger printString.</do-it><do-it>materias := Set new.alumnos do: [:alumnox |     alumno := alumnox.     materias addAll: (alumno getCursadas collect: [:cursadax |        cursada := cursadax. 	   cursada getMateria.    ]) asSet.]. cantidadEncuestas := (Dictionary new).materias do: [:materiax |    materia := materiax. alumnos do: [:alumnox |		alumno := alumnox. 		cantidad := alumno obtenerCantidadCursadas: materia.        (cantidadEncuestas includesKey: materia) ifTrue: [            cantidadEncuestas at: materia put: (cantidadEncuestas at: materia) + cantidad.        ] ifFalse: [            cantidadEncuestas at: materia put: cantidad.        ].    ].]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat printString, ': ',  cant printString, ' '.     ]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |    cadena := cadena, mat asString, ': ', cant printString, '\'.].Dialog warn: 'Cantidad de encuestas ingresadas, discriminadas por materia: \' withCRs, cadena withCRs.</do-it><do-it>cantidadFinalesAprobados := (Dictionary new).alumnos do: [:alumnox |     alumno := alumnox. alumno getFinalesAprobados do: [:finalAprobadox |        finalAprobado := finalAprobadox. materia := finalAprobado getMateria.          (cantidadFinalesAprobados includesKey: materia) ifTrue: [            cantidad := (cantidadFinalesAprobados at: materia) + 1.            cantidadFinalesAprobados at: materia put: cantidad.        ] ifFalse: [            cantidadFinalesAprobados at: materia put: 1.        ].    ].].cantFinalesAprob := cantidadFinalesAprobados values asSortedCollection.maxAprobados := cantFinalesAprob last.minAprobados := cantFinalesAprob first.materiaMaxAprobados := cantidadFinalesAprobados keyAtValue: maxAprobados.materiaMinAprobados := cantidadFinalesAprobados keyAtValue: minAprobados.Dialog warn: 'La materia con mas examenes aprobados es ', materiaMaxAprobados,  ' con ', maxAprobados printString,	'. La materia con menos examenes aprobados es ', materiaMinAprobados, ' con ', minAprobados printString.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ') trimBlanks asUppercase.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>materias := Set new.alumnos do: [:alumnox |     alumno := alumnox.     materias addAll: (alumno getCursadas collect: [:cursadax |        cursada := cursadax. 	   cursada getMateria.    ]) asSet.]. cantidadEncuestas := (Dictionary new).materias do: [:materiax |    materia := materiax. alumnos do: [:alumnox |		alumno := alumnox. 		cantidad := alumno obtenerCantidadCursadas: materia.        (cantidadEncuestas includesKey: materia) ifTrue: [            cantidadEncuestas at: materia put: (cantidadEncuestas at: materia) + cantidad.        ] ifFalse: [            cantidadEncuestas at: materia put: cantidad.        ].    ].]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat printString, ': ',  cant printString, ' '.     ]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |    cadena := cadena, mat asString, ': ', cant printString, '\'.].Dialog warn: 'Cantidad de encuestas ingresadas, discriminadas por materia: \' withCRs, cadena withCRs.</do-it><do-it>cantidadFinalesAprobados := (Dictionary new).alumnos do: [:alumnox |     alumno := alumnox. alumno getFinalesAprobados do: [:finalAprobadox |        finalAprobado := finalAprobadox. materia := finalAprobado getMateria.          (cantidadFinalesAprobados includesKey: materia) ifTrue: [            cantidad := (cantidadFinalesAprobados at: materia) + 1.            cantidadFinalesAprobados at: materia put: cantidad.        ] ifFalse: [            cantidadFinalesAprobados at: materia put: 1.        ].    ].].cantFinalesAprob := cantidadFinalesAprobados values asSortedCollection.maxAprobados := cantFinalesAprob last.minAprobados := cantFinalesAprob first.materiaMaxAprobados := cantidadFinalesAprobados keyAtValue: maxAprobados.materiaMinAprobados := cantidadFinalesAprobados keyAtValue: minAprobados.Dialog warn: 'La materia con mas examenes aprobados es ', materiaMaxAprobados,  ' con ', maxAprobados printString,	'. La materia con menos examenes aprobados es ', materiaMinAprobados, ' con ', minAprobados printString.</do-it><do-it>materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ) trimBlanks asUppercase.desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ) trimBlanks asUppercase.desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := desaprobados * 1.5.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ) trimBlanks asUppercase.desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := (desaprobados * 1.5) asInteger.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 15, 2023' '4:44:05 pm')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 4:44:05 pm on November 15, 2023."</do-it><do-it>alumnos := OrderedCollection new.continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ') trimBlanks asUppercase.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>" Cantidad de exámenes aprobados en un año determinado. "anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>anioFinales := (Dialog request: ' Indique el año para determinar la cantidad de examenes aprobados.' initialAnswer: ' ' ) asNumber.anioFinales asInteger. cantidadFinalesAprobados := 0.alumnos do: [:alumnox |     alumno := alumnox.     cantidadFinalesAprobados := cantidadFinalesAprobados + (alumno obtenerFinalesAprobadosAnio: anioFinales) asInteger.].Dialog warn: 'La cantidad de exámenes finales aprobados en el ', anioFinales printString, ' es igual a ', cantidadFinalesAprobados printString.</do-it><do-it>materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ) trimBlanks asUppercase.anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ) trimBlanks asUppercase.anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ) trimBlanks asUppercase.anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ) trimBlanks asUppercase.anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>continuar := true.[continuar] whileTrue: [     cursadaIngresada := true.    alumno := nil.    cursada := nil.	yaIngresado := false.     [	dni := (Dialog request: ' Ingrese su DNI ' initialAnswer: ' ' ) asNumber.	dni asInteger.	(dni isNil or: [dni between: 15000000 and: 60000000] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un DNI valido '.      	 ].    alumnos do: [:alumnoGuardado |         (alumnoGuardado getDni = dni) ifTrue:[            alumno := alumnoGuardado.		  yaIngresado := true.        ]    ].    (alumno isNil) ifTrue:[        alumno := Alumno new.        alumno setDni: dni.    ].		[cursadaIngresada] whileTrue: [		[	materia := (Dialog request: ' Ingrese el nombre de la materia' initialAnswer: ' ') trimBlanks asUppercase.	(materia =' ' )] whileTrue: [             	Dialog warn: ' Incorrecto!.Debe ingresar un nombre de materia valido. '.      	 ].	cursadaIngresada := false.			(alumno getCursadas isNil) ifFalse: [			alumno getCursadas do: [:cursadasGuardadas |        			(cursadasGuardadas getMateria = materia) ifTrue:[            			"cursada ya ingresada"            			cursadaIngresada := true.            			Dialog warn: 'Esta materia ya fué ingresada por usted, ingrese otra materia.'.        			]    			].		].	].    "------------------------------------------------------INGRESO EL AÑO---------------------------------------------------"	 [	anio := (Dialog request: ' Ingrese el año de cursado de la materia (valor entre 2010 y 2023)' initialAnswer: ' ' ) asNumber.      anio asInteger.	(anio isNil or: [anio between: 2010 and: 2023] )] whileFalse: [             	Dialog warn: ' Incorrecto!.Ingrese un año de cursada valido '.      	 ].                cursada := Cursada new.        cursada setMateria: materia.        cursada setAño: anio.    "------------------------------------------------------------------------------------------------------------------------"    "SELECCION RESULTADO CURSADA, SI ES APROBADO INDICA LA NOTA"    resultadoCursada := Dialog            choose: 'Seleccione el resultado de la cursada'            labels: #( 'Aprobado' 'Desaprobado' 'Ausente')            values: #( 'Aprobado' 'Desaprobado' 'Ausente')            default: #Ausente.    cursada setResultado: resultadoCursada.    (cursada getResultado = 'Aprobado') ifTrue: [        [        nota := (Dialog request: ' Ingrese el resultado de la cursada de la materia (valor entre 6 y 10)' initialAnswer: ' ' ) asNumber.        nota asInteger.        (nota isNil or: [nota between: 6 and: 10] )] whileFalse: [                 Dialog warn: ' Nota fuera de rango. Ingrese la nota de la cursada de la materia (valor entre 6 y 10)'.        ].        cursada setCalificacion: nota.		    ].     alumno setCursadas: cursada.    "------------------------------------------------------------------------------"    rindioFinal := Dialog            choose: ' ¿Rindió alguna vez el examen final de la materia?'            labels: #( 'Si' 'No')            values: #( 'Si' 'No')            default: #Nil.    (rindioFinal = 'Si') ifTrue: [		[       cantFinales := (Dialog request: ' Ingrese la cantidad de veces que rindio el examen final (maximo hasta 8)' initialAnswer: ' ' ) asNumber.        cantFinales asInteger.        (cantFinales isNil or: [cantFinales between: 1 and: 8] )] whileFalse: [                 Dialog warn: ' Incorrecto!. Ingrese una cantidad valida'.        ].                       aproboFinal := Dialog                choose: ' ¿Aprobó el examen final de la materia?'                labels: #( 'Si' 'No')                values: #( 'Si' 'No')                default: #Nil.            (aproboFinal = 'Si') ifTrue: [                finalAprobado := FinalAprobado new.			                [                anioFinal := (Dialog request: ' Indique el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)' initialAnswer: ' ' ) asNumber.                anioFinal asInteger.                 (cursada getAño &lt; anioFinal  and: [anioFinal &lt;= 2023])] whileFalse: [                         Dialog warn: ' Año erroneo. Ingrese el año en el que rindió el examen final aprobado (valor mayor al año de la cursada y hasta el 2023)'.                ].		                finalAprobado setFecha: anioFinal.                [                notaFinal := (Dialog request: 'Indique la calificación obtenida en el examen final aprobado' initialAnswer: ' ' ) asNumber.                notaFinal asInteger.                (notaFinal isNil or: [notaFinal between: 4 and: 10] )] whileFalse: [                         Dialog warn: 'Nota incorrecta. Indique la calificación obtenida en el examen final aprobado'.                ].                finalAprobado setCalificacion: notaFinal.			  finalAprobado setMateria: materia.			  finalAprobado setVeces: cantFinales.                alumno setFinalesAprobados: finalAprobado.            ] ifFalse: [                finalNoAprobado := FinalNoAprobado new.                [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		                finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.			  finalNoAprobado setMateria: materia.			  finalNoAprobado setVeces: cantFinales.                alumno setFinalesNoAprobados: finalNoAprobado.             ]    ] ifFalse: [        finalNoAprobado := FinalNoAprobado new.        [                anioPiensaFinal := (Dialog request: 'Indique el año en el que piensa rendir el examen final (valor mayor o igual a 2023)' initialAnswer: ' ' ) asNumber.                anioPiensaFinal asInteger.                (anioPiensaFinal = ' ' or: [anioPiensaFinal &lt; 2023] )] whileTrue: [                         Dialog warn: ' Año erroneo. Ingrese un año valido. (valor mayor o igual a 2023)'.                ].		        finalNoAprobado setAñoPiensaRendir: anioPiensaFinal.	   finalNoAprobado setMateria: materia.	   finalNoAprobado setVeces: cantFinales.        alumno setFinalesNoAprobados: finalNoAprobado.    ].	(yaIngresado) ifFalse:[        alumnos add: alumno.    ].    continuar := Dialog        choose: '¿Desea seguir ingresando alumnos?'        labels: #( 'Si' 'No' )        values: #( true false )        default: #false.    ].</do-it><do-it>materiaRendir := (Dialog request: ' Indique la materia para determinar la cantidad de alumnos que piensan rendirla.' initialAnswer: ' ' ) trimBlanks asUppercase.anioPiensanRendir := (Dialog request: ' Indique el año para determinar la cantidad de alumnos que piensan rendir ', materiaRendir initialAnswer: ' ' ) asNumber.anioPiensanRendir asInteger. cantidadPiensanRendir := (alumnos select: [:alumnox |     alumno := alumnox. 	alumno piensaRendir: materiaRendir and: anioPiensanRendir.]) size.Dialog warn: 'La cantidad de alumnos que piensan rendir ', materiaRendir, ' en el ', anioPiensanRendir printString, ' es igual a ', cantidadPiensanRendir printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><do-it>dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.	calificacionAlta := alumno obtenerCalificacionAltaFinales.calificacionBaja := alumno obtenerCalificacionBajaFinales.Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.</do-it><do-it>alumno calcularPromedioFinales</do-it><do-it>alumno calcularPromedioFinales</do-it><do-it>(alumno getFinalesAprobados) size</do-it><do-it>cantidadAprobadas</do-it><do-it>Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: No posee' withCRs, 
	'\Calificacion mas alta: No posee' withCRs,
     '\Calificacion mas baja: No posee' withCRs.</do-it><do-it>dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.(cantidadAprobadas = 0) ifTrue: [	Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: No posee' withCRs, 
	'\Calificacion mas alta: No posee' withCRs,
     '\Calificacion mas baja: No posee' withCRs.] ifFalse: [	promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.		calificacionAlta := alumno obtenerCalificacionAltaFinales.	calificacionBaja := alumno obtenerCalificacionBajaFinales.	Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.].</do-it><do-it>dni := (Dialog request: 'Ingrese un DNI para determinar la cantidad de materias aprobadas.' initialAnswer: ' ' ) asNumber.dni asInteger.alumno := (alumnos select: [:unAlumno |     unAlumno getDni = dni]) first.cantidadAprobadas := (alumno getFinalesAprobados) size.(cantidadAprobadas = 0) ifTrue: [	Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: No posee' withCRs, 
	'\Calificacion mas alta: No posee' withCRs,
     '\Calificacion mas baja: No posee' withCRs.] ifFalse: [	promedio := alumno calcularPromedioFinales asFloat roundTo: 0.01.		calificacionAlta := alumno obtenerCalificacionAltaFinales.	calificacionBaja := alumno obtenerCalificacionBajaFinales.	Dialog warn: 'Resultados del alumno con Dni: ', dni printString, 
	'\Materias aprobadas: ' withCRs, cantidadAprobadas printString, 
	'\Promedio: ' withCRs, promedio printString, 
	'\Calificacion mas alta: ' withCRs, calificacionAlta printString,
     '\Calificacion mas baja: ' withCRs, calificacionBaja printString.].</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ) trimBlanks asUppercase.aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := ((aprobados size / alumnos size) * 100) asFloat.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar el porcentaje de alumnos que aprobaron la cursada y el final.' initialAnswer: ' ' ) trimBlanks asUppercase.aprobados := alumnos select: [:alumnox |    alumno := alumnox. alumno aproboCursadaConFinal: materia.].porcentaje := ((aprobados size / alumnos size) * 100) asFloat roundTo: 0.01.Dialog warn:     'Porcentaje de alumnos que aprobaron la cursada y el final de ', materia,     ': ', porcentaje printString, '%'.</do-it><do-it>alumnos size</do-it><do-it>aprobados size</do-it><do-it>porcentaje</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox.     sumatoriaFinales := sumatoriaFinales + promedio. ].(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. 	promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox.     sumatoriaCursadas := sumatoriaCursadas + promedio. ].(promediosCursadas size = 0) ifTrue: [	promedioCursadasTotal := 'Nadie cursó la materia' .] ifFalse: [	promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.].Dialog warn: 'Resultados para la materia ', materia, 	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.promedioFinales := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioFinales: materia.]) select: [:promediox |	promedio := promediox. promedio isNil not.]. sumatoriaFinales := 0.promedioFinales do: [:promediox |    promedio := promediox.     sumatoriaFinales := sumatoriaFinales + promedio. ].(promedioFinales size = 0) ifTrue: [	promedioFinalesTotal := 'Nadie tiene el final aprobado' .] ifFalse: [	promedioFinalesTotal :=  (sumatoriaFinales / (promedioFinales size)) asFloat.].promediosCursadas := (alumnos collect: [:alumnox |    alumno := alumnox.     alumno calcularPromedioCursadas: materia.]) select: [:promediox |	promedio := promediox. 	promedio isNil not.]. sumatoriaCursadas := 0.promediosCursadas do: [:promediox |    promedio := promediox.     sumatoriaCursadas := sumatoriaCursadas + promedio. ].(promediosCursadas size = 0) ifTrue: [	promedioCursadasTotal := 'Nadie cursó la materia' .] ifFalse: [	promedioCursadasTotal := (sumatoriaCursadas / (promediosCursadas size)) asFloat.].Dialog warn: 'Resultados para la materia ', materia, 	'\Promedio de calificaciones de la cursada: ' withCRs, promedioCursadasTotal printString, 	'\Promedio de calificaciones de examenes finales: ' withCRs, promedioFinalesTotal printString.</do-it><do-it>cantidadAlumnosARendir := 0.
alumnos do: [:alumnox | 
    alumno := alumnox. 
    cantidadAlumnosARendir := cantidadAlumnosARendir + (alumno calcularFinalesNoAprobados: 2024).
].

Dialog warn: 'La cantidad estimada de alumnos que van a rendir una materia en el año 2024 es igual a ', cantidadAlumnosARendir asInteger printString.</do-it><do-it>materias := Set new.alumnos do: [:alumnox |     alumno := alumnox.     materias addAll: (alumno getCursadas collect: [:cursadax |        cursada := cursadax. 	   cursada getMateria.    ]) asSet.]. cantidadEncuestas := (Dictionary new).materias do: [:materiax |    materia := materiax. alumnos do: [:alumnox |		alumno := alumnox. 		cantidad := alumno obtenerCantidadCursadas: materia.        (cantidadEncuestas includesKey: materia) ifTrue: [            cantidadEncuestas at: materia put: (cantidadEncuestas at: materia) + cantidad.        ] ifFalse: [            cantidadEncuestas at: materia put: cantidad.        ].    ].]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |        cadena := cadena, mat printString, ': ',  cant printString, ' '.     ]. cadena := String new.cantidadEncuestas keysAndValuesDo: [:mat :cant |    cadena := cadena, mat asString, ': ', cant printString, '\'.].Dialog warn: 'Cantidad de encuestas ingresadas, discriminadas por materia: \' withCRs, cadena withCRs.</do-it><do-it>cantidadFinalesAprobados := (Dictionary new).alumnos do: [:alumnox |     alumno := alumnox. alumno getFinalesAprobados do: [:finalAprobadox |        finalAprobado := finalAprobadox. materia := finalAprobado getMateria.          (cantidadFinalesAprobados includesKey: materia) ifTrue: [            cantidad := (cantidadFinalesAprobados at: materia) + 1.            cantidadFinalesAprobados at: materia put: cantidad.        ] ifFalse: [            cantidadFinalesAprobados at: materia put: 1.        ].    ].].cantFinalesAprob := cantidadFinalesAprobados values asSortedCollection.maxAprobados := cantFinalesAprob last.minAprobados := cantFinalesAprob first.materiaMaxAprobados := cantidadFinalesAprobados keyAtValue: maxAprobados.materiaMinAprobados := cantidadFinalesAprobados keyAtValue: minAprobados.Dialog warn: 'La materia con mas examenes aprobados es ', materiaMaxAprobados,  ' con ', maxAprobados printString,	'. La materia con menos examenes aprobados es ', materiaMinAprobados, ' con ', minAprobados printString.</do-it><do-it>materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ) trimBlanks asUppercase.desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := (desaprobados * 1.5) asInteger.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ) trimBlanks asUppercase.desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := (desaprobados * 1.5) asInteger.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>materia := (Dialog request: 'Indique la materia para determinar los alumnos que cursaran la materia en el año 2024.' initialAnswer: ' ' ) trimBlanks asUppercase.desaprobados := (alumnos select: [:alumnox |    alumno := alumnox. alumno desaproboCursada: materia.]) size.desaprobados := (desaprobados * 1.5) asInteger.Dialog warn:     'La cantidad de alumnos que van a cursar ', materia printString,     ' en 2024 es ', desaprobados printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.cursadas := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia</do-it><do-it>alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].</do-it><do-it>anio</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 16, 2023' '5:35:36 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 5:35:36 am on November 16, 2023."</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>alumno := alumnos at: 1.	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].</do-it><do-it>alumno := alumnos at: 1.	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia.        cursada getAño = anio.    ].</do-it><do-it>alumno := alumnos at: 1.	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia and: [cursada getAño = anio].    ].</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia and: [cursada getAño = anio].    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia and: [cursada getAño = anio].    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de ', materia, 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>Dialog warn: 'Resultados de la cursada de ', materia,' en el ',anio printString,': ', 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia and: [cursada getAño = anio].    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de la cursada de ', materia,' en el ',anio printString,': ', 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>materia := (Dialog request: ' Indique la materia para determinar los resultados de una cursada.' initialAnswer: ' ' ) trimBlanks asUppercase.anio := (Dialog request: ' Indique el año de la cursada de ', materia initialAnswer: ' ' ) asNumber.anio asInteger. aprobados := 0.desaprobados := 0.ausentes := 0.alumnos do: [:alumnox |     alumno := alumnox. 	cursadasMateria := alumno getCursadas select: [:cursadax |        cursada := cursadax. 	   cursada getMateria = materia and: [cursada getAño = anio].    ].    aprobados := aprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Aprobado'.    ]) size.    desaprobados := desaprobados + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Desaprobado'.    ]) size.	ausentes := ausentes + (cursadasMateria select: [:cursadax |        cursada := cursadax. 	   cursada getResultado = 'Ausente'.    ]) size.].Dialog warn: 'Resultados de la cursada de ', materia,' en el ',anio printString,': ', 
	'\Aprobados: ' withCRs, aprobados printString, 
	'\Desaprobados: ' withCRs, desaprobados printString, 
	'\Ausentes: ' withCRs,ausentes printString.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im' 'November 16, 2023' '5:55:05 am')""An image file c:\Users\Alan\Documents\GitHub\ColoquioFinalPLP2023\ejercicio_1\ejercicio_1.im was created at 5:55:05 am on November 16, 2023."</do-it>